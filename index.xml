<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Michael Clark</title>
<link>https://m-clark.github.io/</link>
<atom:link href="https://m-clark.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>&quot;Statistics, Data, Science&quot;
</description>
<generator>quarto-1.6.30</generator>
<lastBuildDate>Wed, 01 Jan 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>Some News for the New Year</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2025-news/</link>
  <description><![CDATA[ 





<section id="update" class="level2">
<h2 class="anchored" data-anchor-id="update">Update</h2>
<p>Among many things that have happened recently, I’ve had a daughter, and <a href="https://m-clark.github.io/book-of-models">written a book</a> to come out this year. Fun stuff!</p>
<p>Not so fun - I’m also attempting to migrate my distill site to quarto and using VS Code, which has been, at best, very difficult. After a lot of effort, it looks like I finally got quarto to use the appropriate python environment (and I’ve given up on trying to get ‘post-specific’ environments to work). Then came the general publishing problems…</p>
<p>In the end I may lose a lot of the previous code content, since quarto doesn’t appear to respect the old web cached objects I had associated with prior posts (which included now defunct or notably modified packages). It also has to use a different directory output, which means I have update links along with rerunning old posts.</p>
<p>I love using Quarto, and highly recommend it for most things (including if you never created a website before), but this particular aspect has been not at all straightforward. So, while my website will ultimately look slightly better, and hopefully be easier to maintain, the old content will be lacking for a while while I try to redo them. Stay tuned.</p>
</section>
<section id="goals" class="level2">
<h2 class="anchored" data-anchor-id="goals">Goals</h2>
<p>For 2025 there are a couple posts I hope to do:</p>
<ul>
<li>A post on class imbalance Elizabeth and I intended for out work blog but which never was published.</li>
<li>A post I had on conformal prediction that was likewise intended for the work blog.</li>
<li>Something new that is of interest</li>
</ul>
<p>I can also foresee more review based stuff, or just having my code be independent of the post. It’s only every few years that I update my site significantly, but I definitely get tired of trying to maintain this stuff when many things conspire against doing so. You can use specific environments, but then they will still likely unusable in the future if the package functionality or even the versions are no longer supported. I also don’t want a post two years from now to be beholden to a package’s current functionality. Caching would solve a lot of it, but doesn’t seem to respected when other aspects of the computing environment change.</p>
</section>
<section id="migration-issues" class="level2">
<h2 class="anchored" data-anchor-id="migration-issues">Migration Issues</h2>
<p>Issues I came across in case it’s useful to others:</p>
<ul>
<li>https://github.com/quarto-dev/quarto-cli/issues/10276</li>
<li>https://github.com/quarto-dev/quarto-cli/issues/5220</li>
<li>Deployment error (had to ‘rerun all’ from github itself)</li>
<li>Default radian pointing to wrong python environment which would then automatically load that environment and ignore any other env setting.</li>
<li>https://github.com/quarto-dev/quarto-cli/issues/9929 (I think this was because I was in the gh-pages branch and not the main branch)</li>
</ul>
<p>What my ultimate solution was:</p>
<p>For Python:</p>
<ul>
<li>The only env I could get things to recognize was a conda env in a default location for conda envs. My preference for uv created env, and secondarily, standard py env would not be recognized.
<ul>
<li>Would not recognize any env in project directories</li>
</ul></li>
<li>In .Rprofile (not <code>.Renviron</code>, not <code>_environment</code>, which were not resepected) put <code>Sys.setenv(RETICULATE_PYTHON = "~/anaconda3/envs/m-clark-github-io/bin/python")</code> followed by <code>library(reticulate)</code>.</li>
</ul>
<p>For R:</p>
<ul>
<li>I can literally save an RData file, write code for it to load, and when quarto renders it, it will say certain objects not found.</li>
</ul>
<p>For publishing:</p>
<ul>
<li>The biggest issue was the inability to use the top-level directory as the output_dir as I had before.</li>
<li>I also now have to change every post file from its previous name to ‘index.qmd’ within the date-named directory in order for previous links to work. I could add an <a href="https://quarto.org/docs/websites/website-navigation.html#redirects">alias</a> to every one of the files and let them redirect, but I prefer the cleaner address, and it’s easier to rename the files collectively than to add aliases to every post.</li>
<li>I had to discover that you can’t be in the gh-pages branch (which I’m still fuzzy as to the need of). It’s mentioned in the doc, but not stressed or highlighted at all.</li>
</ul>
<p>Once I was able to get quarto to render the pages in the first place, it published pretty easily via <code>quarto publish gh-pages</code>. I then had an issue where when publishing it gave some 404 error. I noticed it had updated the gh-pages branch after I pushed a recent change to main, so I pushed that branch as well, then tried to publish and it worked. Honestly they need more documentation as to exactly what the workflow is, especially for a blog (and with actual code, rather than a 2 year old demo website with a title suggesting there is but doesn’t actually have code).</p>
<p>So it seems the workflow is something like this:</p>
<ul>
<li>Make change on main</li>
<li>Push to main</li>
<li>gh-pages will magically update?</li>
<li>Push gh-pages</li>
<li>Publish</li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section></div> ]]></description>
  <guid>https://m-clark.github.io/posts/2025-news/</guid>
  <pubDate>Wed, 01 Jan 2025 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Long time no see…</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2024-05-20/</link>
  <description><![CDATA[ 





<section id="book-in-progess" class="level2">
<h2 class="anchored" data-anchor-id="book-in-progess">Book in progess</h2>
<p>TLDR: <a href="https://m-clark.github.io/book-of-models">https://m-clark.github.io/book-of-models</a></p>
<p>Been a long time since I posted. Part of this was due to the fact that I had almost completely transferred my site to quarto, but then never got around to finishing it. That will happen eventually, and I will hopefully start posting again at that point.</p>
<p>But the real news is that I am working on a new book. It is a book on exploring models in data science, currently titled <em>Models Demystified</em>. In it, Seth Berry and I attempt to cover a wide range of models, from the simple to the complex, in a way that is accessible to those who are not experts in statistics or machine learning, or might be coming from one area and would like the basics in the other. It covers quite a bit of ground, but tries to stick to the core what’s necessary to get started doing <em>good enough</em> modeling. We’re excited about it, and hope to have it out by the end of the year on CRC press in print, but you can <a href="https://m-clark.github.io/book-of-models">check it out now while it’s in progress</a>. Hope you enjoy it!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{clark2024,
  author = {Clark, Michael},
  title = {Long Time No See...},
  date = {2024-05-20},
  url = {https://m-clark.github.io/posts/2024-05-20/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-clark2024" class="csl-entry quarto-appendix-citeas">
Clark, Michael. 2024. <span>“Long Time No See...”</span> May 20, 2024.
<a href="https://m-clark.github.io/posts/2024-05-20/">https://m-clark.github.io/posts/2024-05-20/</a>.
</div></div></section></div> ]]></description>
  <category>miscellaneous</category>
  <guid>https://m-clark.github.io/posts/2024-05-20/</guid>
  <pubDate>Mon, 20 May 2024 04:00:00 GMT</pubDate>
  <media:content url="https://m-clark.github.io/img/book_gp.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Stuff Going On</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2023-03-misc/</link>
  <description><![CDATA[ 





<p>It’s been a bit so thought I’d force myself to post a couple things I’ve played around with, or that aren’t ready yet for a full post, or won’t be one.</p>
<section id="football-players-still-dont-know-penalty-kick-basics" class="level2">
<h2 class="anchored" data-anchor-id="football-players-still-dont-know-penalty-kick-basics">Football players still don’t know penalty kick basics</h2>
<p>Did a quick and dirty Bayesian analysis to get posterior probabilities for location, controlling for various factors. As a side note, I won the office world cup challenge with a fancy model of which I will never reveal the details, but may or may not have included lots of guessing and luck.</p>
<p><img src="https://m-clark.github.io/img/world_cup_penalty_bayes.jpg" class="img-fluid"></p>
</section>
<section id="tabular-data-post" class="level2">
<h2 class="anchored" data-anchor-id="tabular-data-post">Tabular data post</h2>
<p>I finally did my first post at the <a href="https://www.strong.io/blog/">Strong blog</a>! It’s a <a href="https://www.strong.io/blog/deep-learning-for-tabular-data-an-overview">high-level overview of tabular data and deep learning</a> that summarizes some of my previous posts <a href="https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/">here</a> and <a href="https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/">here</a>.</p>
</section>
<section id="class-imbalance" class="level2">
<h2 class="anchored" data-anchor-id="class-imbalance">Class Imbalance</h2>
<p>For my next post at the Strong blog, Elizabeth Monroe and I are working on a similarly high-level overview of issues with class imbalance we’ve been coming across. I will probably provide even more details and simulation results in a post on this site eventually, but here is a preview plot showing (mis)calibration plots at varying degrees of imbalance and different sample sizes.</p>
<p><img src="https://m-clark.github.io/img/calibration_plot_default_avg.png" class="img-fluid"></p>
</section>
<section id="two-years-at-strong" class="level2">
<h2 class="anchored" data-anchor-id="two-years-at-strong">Two years at Strong</h2>
<p>Hard to believe for me anyway, but I’ve been out of academia for two years now, after previously spending my professional lifetime there. Aside from some of the obvious differences, one of the more satisfying changes for me has been that the skills I’ve acquired are utilized on a daily basis, and something I need to continuously develop for the job. At Strong our clients want good results in a timely fashion, and though the results might be notably complex, they still need to be sufficiently interpretable as well as reproducible/production-ready. I also have come across more desire for causal explanations from clients, which might be surprising to what is typically assumed for academia vs.&nbsp;industry. Clients obviously require buy-in for what we do, but they ultimately defer to us for the expertise we provide.</p>
<p><a href="https://www.strong.io/">Strong Analytics</a> was a great move for me, because they clearly value the strong academic background of its employees, but are practically minded, and focus on skills that allow one to be nimble enough to get the clients what they need. Just like I was in academia, I am surrounded by a diverse group of smart folks I respect a lot, and am happy to solve some tough problems with. I feel I’ve learned how to get things done in a more efficient manner, and do a better job of explaining what I’ve done to wider audience.</p>
<p>Among some things I miss with academia, one was working with faculty and grad students who were just starting with an idea, and continuing a relationship with them until ultimately getting to publication or a successful dissertation defense after a very long journey. Another was giving workshops regularly where you could help people with their initial baby steps into the large world of data science. In general, it was easy to feel personally invested in the individuals you were working with, and their successes felt like your own.</p>
<p>However, in academia it was often a struggle to get buy-in for more complicated methods or new techniques, because the stakes were typically lower and people knew the minimum required to get them published, defended or whatever, and mostly just wanted help getting to that point. There’s nothing wrong with that necessarily, that’s just the practical reality, and a reflection of what’s valued in academia. Despite that, I can say I definitely had some good partnerships with people involved in challenging research that was very rewarding, and those projects made it generally very satisfying to work in academia.</p>
<p>Ultimately though, I’m happy to have made the jump. It’s a bit weird to me how much drama there is on this topic on twitter and elsewhere. It’s really not that big of a deal which route you go, and in the grand scheme of things, almost no one will care if you work in academia or industry but you. There are pros and cons to both, and people should just pick what will make them happier.</p>
</section>
<section id="coming-up" class="level2">
<h2 class="anchored" data-anchor-id="coming-up">Coming up</h2>
<p>Whenever I can get around to it, I’ll try and post on those class imbalance simulations mentioned above, conformal prediction, and some other fun stuff. Stay tuned!</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{clark2023,
  author = {Clark, Michael},
  title = {Stuff {Going} {On}},
  date = {2023-03-10},
  url = {https://m-clark.github.io/posts/2023-03-misc/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-clark2023" class="csl-entry quarto-appendix-citeas">
Clark, Michael. 2023. <span>“Stuff Going On.”</span> March 10, 2023. <a href="https://m-clark.github.io/posts/2023-03-misc/">https://m-clark.github.io/posts/2023-03-misc/</a>.
</div></div></section></div> ]]></description>
  <category>miscellaneous</category>
  <guid>https://m-clark.github.io/posts/2023-03-misc/</guid>
  <pubDate>Fri, 10 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Deep Linear Models</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2022-09-deep-linear-models/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<blockquote class="blockquote">
<p>NB: This post was revisited when updating the website early 2025, and some changes were required. Attempts to keep things consistent were made, but if you feel you’ve found an issue, please post it at <a href="http://github.com/m-clark/m-clark.github.io/issues">GitHub</a>.</p>
</blockquote>
<p>This post gives a by-hand example of a linear model using <span class="pack">pytorch</span>. A good question to ask right off the bat would be- why would anyone do this? We use deep learning typically because linear regression isn’t up to the task! Well, for one thing, it serves as a stepping stone for those who know basic statistical methodology like linear regression, but want to get into deep learning in a conceptual manner. Another is to just see some <span class="pack">pytorch</span> basics in a simple setting. And one last reason is that maybe you want to incorporate a more standard statistical modeling approach into some other deep learning endeavor. Everyone can join the party!</p>
<p>For this demo we’ll use <a href="https://www.kaggle.com/code/jhoward/linear-model-and-neural-net-from-scratch">an example by <span class="pack">fastai</span></a>, which is a great resource for <a href="https://course.fast.ai/">getting started with deep learning</a>. While their example serves as a basis, I will generalize the functionality so that you can play around with the settings and try other data examples<sup>1</sup>. In addition, this post will assume you know things like why you would dummy code features and linear regression basics, and will use some other naming conventions<sup>2</sup>.</p>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<p>Let’s get the primary packages loaded first.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> lgb</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span></code></pre></div>
</div>
<p>Next, we’ll use the well-known <a href="https://www.kaggle.com/code/jhoward/linear-model-and-neural-net-from-scratch/data">titanic dataset</a>, and to start things off, we’ll need to get a sense of what we’re dealing with. The basic idea is that we’d like to predict survival based on key features like sex, age, ticket class and more.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># non-kaggle-requiring url here: https://raw.githubusercontent.com/m-clark/m-clark.github.io/master/data/dl-linear-regression/titanic/train.csv</span></span>
<span id="cb2-2">df_titanic_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/dl-linear-regression/titanic/train.csv'</span>)</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_titanic_train</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df_titanic_train.describe()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare
count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000
mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208
std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429
min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000
25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400
50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200
75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000
max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200

[8 rows x 7 columns]</code></pre>
</div>
</div>
</section>
<section id="initial-data-processing" class="level2">
<h2 class="anchored" data-anchor-id="initial-data-processing">Initial Data Processing</h2>
<p>The data is not ready for modeling as is, so we’ll do some additional processing to get it ready. We’ll check out the missing values and replace them with modes<sup>3</sup>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df_titanic_train.isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>PassengerId      0
Survived         0
Pclass           0
Name             0
Sex              0
Age            177
SibSp            0
Parch            0
Ticket           0
Fare             0
Cabin          687
Embarked         2
dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">modes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_titanic_train.mode().iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-2"></span>
<span id="cb7-3">df_titanic_train.fillna(modes, inplace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5">df_titanic_train.describe(include <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.number))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare
count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000
mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208
std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429
min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000
25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400
50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200
75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000
max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200

[8 rows x 7 columns]</code></pre>
</div>
</div>
<p>With features, sometimes it is worthwhile to log transform data for potentially more efficient optimization search. Since we have zeros, we add 1 before taking the log.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df_titanic_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>].hist()</span></code></pre></div>
</div>
<p><img src="https://m-clark.github.io/img/dl-linreg/fare-hist.png" class="img-fluid" style="width:50.0%"></p>
<p>Now the transformed data looks a little more manageable. More to the point, we won’t potentially have huge coefficients relative to other covariates because of the range of the data.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df_titanic_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log1p(df_titanic_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fare'</span>])</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df_titanic_train['LogFare'].hist()</span></span></code></pre></div>
</div>
<p><img src="https://m-clark.github.io/img/dl-linreg/fare-hist-log.png" class="img-fluid" style="width:50.0%"></p>
<p>The <code>Pclass</code> (passenger class) feature is actually categorical.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">pclasses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(df_titanic_train.Pclass.unique())</span>
<span id="cb11-2">pclasses</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[np.int64(1), np.int64(2), np.int64(3)]</code></pre>
</div>
</div>
<p>Here are the other categorical features.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df_titanic_train.describe(include <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                           Name   Sex  Ticket    Cabin Embarked
count                       891   891     891      891      891
unique                      891     2     681      147        3
top     Braund, Mr. Owen Harris  male  347082  B96 B98        S
freq                          1   577       7      691      646</code></pre>
</div>
</div>
<p>In order to use categorical variables, they need to be changed to numbers<sup>4</sup>, so we dummy code them here. There are other coding schemes, and for most deep learning approaches people will often use <em>embeddings</em><sup>5</sup>, particularly for things that have lots of unique categories.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df_titanic_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.get_dummies(df_titanic_train, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sex"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pclass"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Embarked"</span>])</span></code></pre></div>
</div>
<p>Let’s take a look at our data now.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df_titanic_train.columns</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Index(['PassengerId', 'Survived', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket',
       'Fare', 'Cabin', 'LogFare', 'Sex_female', 'Sex_male', 'Pclass_1',
       'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S'],
      dtype='object')</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">df_titanic_train.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   PassengerId  Survived  ... Embarked_Q  Embarked_S
0            1         0  ...      False        True
1            2         1  ...      False       False
2            3         1  ...      False        True
3            4         1  ...      False        True
4            5         0  ...      False        True

[5 rows x 18 columns]</code></pre>
</div>
</div>
</section>
<section id="getting-started-with-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-pytorch">Getting Started with pytorch</h2>
<section id="setup" class="level3">
<h3 class="anchored" data-anchor-id="setup">Setup</h3>
<p>Now we are ready to prep things for specific use with <span class="pack">pytorch</span>. I will not use the same terminology as in Jeremy’s original post, so for us, <code>target</code> = ‘dependent variable’ and <code>X</code> is our feature matrix<sup>6</sup>. Both of these will be <span class="pack">pytorch</span> <em>tensors</em>, which for our purposes is just another word for an array of arbitrary size.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb20-2">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span>
<span id="cb20-3">target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(df_titanic_train.Survived)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">dummies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex_male'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sex_female'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pclass_3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_C'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_Q'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Embarked_S'</span>]</span>
<span id="cb21-2">all_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Age'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SibSp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Parch'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dummies </span>
<span id="cb21-3"></span>
<span id="cb21-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_titanic_train[all_features].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.to_numeric).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb21-5">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor(X.values, dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7">X.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([891, 12])</code></pre>
</div>
</div>
</section>
</section>
<section id="setting-up-a-linear-model" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-a-linear-model">Setting up a linear model</h2>
<p>We have our feature matrix and target variable prepped. The next step is to map the features to the target by means of predicted values. In linear regression, we typically call the weights that produce the predictions <em>coefficients</em>, but in standard deep/machine learning terminology, they are usually called <em>weights</em>, or more generally, <em>parameters</em>. Here, we generate some random values between -.5 and .5 to get started<sup>7</sup>:.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">442</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;torch._C.Generator object at 0x16d8c3330&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">n_coeff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb25-2">coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_coeff) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default would produce values from 0 to 1</span></span>
<span id="cb25-3">coeffs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,
         0.2799, -0.4392,  0.2103,  0.3625])</code></pre>
</div>
</div>
<p>The original post did a form of min-max scaling to the features, basically putting everything on a potentially [0, 1] scale. Here we’ll use standardization as an alternative, giving each feature a mean of zero and standard deviation of 1.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># vals,indices = X.max(dim=0)</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X = X / vals</span></span>
<span id="cb27-3">X_means <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.mean(dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, keepdim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb27-4">X_sds   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.std(dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-5"></span>
<span id="cb27-6">X_sc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> X_means) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> X_sds</span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X_sc.mean(dim = 0)  # all means = 0 </span></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X_sc.std(dim = 0)   # all sd = 1</span></span></code></pre></div>
</div>
<p>As noted in the original post and worth iterating here for our statistical modeling crowd, we don’t estimate an intercept for this model and keep all the dummy coded features. The following takes our coefficients, multiplies them by their respective feature, and sums them.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (X_sc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> coeffs).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb28-2">preds[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([ 0.6000, -1.9341,  0.2080,  0.1723, -0.0032,  0.3088, -0.5066,  1.6219,
         0.6990, -1.2584])</code></pre>
</div>
</div>
<p>We can calculate our <em>loss</em>, the difference in our predictions versus the target values, in many ways. Here we get the mean squared error.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.square(preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> target).mean()</span>
<span id="cb30-2">loss</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(1.3960)</code></pre>
</div>
</div>
<p>Now we’ll create functions that do the previous steps, and finally, give it a test run! In the original <span class="pack">fastai</span> formulation, they use mean absolute error for the loss, which actually is just the <code>L1loss</code> that is available in torch. For a change of pace, we’ll keep our mean squared error, which is sometimes called <em>L2</em> loss (this will create different results from the original notebook). I create the option within the function for you to do either. Also note that the functions we create here will take inputs generally, rather than being specific to the objects we create, so you can try this stuff out with other data.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_preds(X, weights):</span>
<span id="cb32-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>((X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> weights).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_loss(X, weights, target, which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l2'</span>):</span>
<span id="cb32-5">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_preds(X, weights)</span>
<span id="cb32-6">    </span>
<span id="cb32-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.abs(calc_preds(X, coeffs)-target).mean()  # original</span></span>
<span id="cb32-8"></span>
<span id="cb32-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l2'</span>:</span>
<span id="cb32-10">      loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.MSELoss()</span>
<span id="cb32-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>: </span>
<span id="cb32-12">      loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.L1Loss()</span>
<span id="cb32-13">      </span>
<span id="cb32-14">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss(preds, target.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>())</span>
<span id="cb32-15">      </span>
<span id="cb32-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(L)</span>
<span id="cb32-17"></span>
<span id="cb32-18">calc_loss(X_sc, coeffs, target), calc_loss(X_sc, coeffs, target, which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l1'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(tensor(1.3960), tensor(0.8891))</code></pre>
</div>
</div>
<section id="doing-a-gradient-descent-step" class="level3">
<h3 class="anchored" data-anchor-id="doing-a-gradient-descent-step">Doing a Gradient Descent Step</h3>
<p>We can continue our journey onward to actually estimating the weights rather than specifying them directly, since we definitely don’t want to just keep guessing! This is an iterative process where we still start with an initial (random) guess, then, at each step, refine our guess in a way that lowers our loss. For neural networks we call these steps <em>epochs</em>, and getting our next guess requires calculating what’s called a <em>gradient</em>. Here are some resources for more detail:</p>
<ul>
<li><a href="https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work">How Does a Neural Net Really Work?</a>: great intro by Jeremy Howard</li>
<li><a href="https://m-clark.github.io/models-by-example/stochastic-gradient-descent.html">Some by-hand code using gradient descent for linear regression, R</a>, <a href="https://m-clark.github.io/models-by-example/supplemental.html#python-sgd">Python</a>: By yours truly</li>
</ul>
<p>In any case, this is basic functionality within <span class="pack">pytorch</span>, and it will keep track of each step taken.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">coeffs.requires_grad_()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([-0.4629,  0.1386,  0.2409, -0.2262, -0.2632, -0.3147,  0.4876,  0.3136,
         0.2799, -0.4392,  0.2103,  0.3625], requires_grad=True)</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(X_sc, coeffs, target)</span>
<span id="cb36-2">loss</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(1.3960, grad_fn=&lt;MseLossBackward0&gt;)</code></pre>
</div>
</div>
<p>We use <span class="func">backward</span> to calculate the gradients and inspect them.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">loss.backward()</span>
<span id="cb38-2"></span>
<span id="cb38-3">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([-0.9311,  0.6245,  0.4957, -0.7423,  0.6008, -0.6008, -0.9158,  0.0938,
         0.7127, -1.7183,  0.1715,  1.3974])</code></pre>
</div>
</div>
<p>Each time backward is called, the gradients are added to the previous values. We can see here that they’ve now doubled.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(X_sc, coeffs, target)</span>
<span id="cb40-2"></span>
<span id="cb40-3">loss.backward()</span>
<span id="cb40-4"></span>
<span id="cb40-5">coeffs.grad</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([-1.8621,  1.2491,  0.9914, -1.4847,  1.2015, -1.2015, -1.8317,  0.1877,
         1.4254, -3.4366,  0.3431,  2.7947])</code></pre>
</div>
</div>
<p>What we want instead is to set them back to zero after they are used for our estimation step. The following does this.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(X_sc, coeffs, target)</span>
<span id="cb42-2"></span>
<span id="cb42-3">loss.backward()</span>
<span id="cb42-4"></span>
<span id="cb42-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb42-6">    coeffs.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sub subtracts in place</span></span>
<span id="cb42-7">    coeffs.grad.zero_()                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># zeros out in place</span></span>
<span id="cb42-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(calc_loss(X, coeffs, target))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([-0.1836, -0.0488,  0.0922, -0.0035, -0.4435, -0.1345,  0.7624,  0.2854,
         0.0661,  0.0763,  0.1588, -0.0567], requires_grad=True)
tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
tensor(37.9424)</code></pre>
</div>
</div>
</section>
<section id="training-the-linear-model" class="level3">
<h3 class="anchored" data-anchor-id="training-the-linear-model">Training the Linear Model</h3>
<p>We typically would split our data into training and test. We can do so here, or keep this data as training and import <code>test.csv</code> for the test set. The latter is actually used for the Kaggle submission, but that’s not a goal here. We’ll use <span class="pack">scikit-learn</span> for the splitting.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test size .2 in keeping with fastai RandomSplitter default</span></span>
<span id="cb44-4">train_x, valid_x, train_y, valid_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(</span>
<span id="cb44-5">  X_sc, </span>
<span id="cb44-6">  target.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(), </span>
<span id="cb44-7">  test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, </span>
<span id="cb44-8">  random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">808</span></span>
<span id="cb44-9">)</span>
<span id="cb44-10">  </span>
<span id="cb44-11"></span>
<span id="cb44-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_x), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># might be one off of the original notebook</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(712, 179)</code></pre>
</div>
</div>
<p>As before, we’ll create functions to help automate our steps:</p>
<ul>
<li>one to initialize the weights</li>
<li>a function to update weights</li>
<li>one to do a full epoch (using weights to calculate loss, updating weights)</li>
<li>one to train the entire model (run multiple times/epochs)</li>
</ul>
<p>As mentioned, the approach here is to create functions that are general enough to take any X or target, so they look a little different from the original notebook. I also add in a verbosity option so you can see the loss at each <code>verbose</code> value epoch (e.g.&nbsp;<code>verbose = 10</code> means you’ll see the latest loss value every 10 epochs), so you can watch the iterations for as long as you like without it printing constantly (possibly not too big a deal depending on your IDE).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_weights(n_wts): </span>
<span id="cb46-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (torch.rand(n_wts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>).requires_grad_()</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(weights, lr):</span>
<span id="cb46-5">    weights.sub_(weights.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb46-6">    weights.grad.zero_()</span>
<span id="cb46-7"></span>
<span id="cb46-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> one_epoch(X, weights, target, lr, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb46-9">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(X, weights, target)</span>
<span id="cb46-10">    loss.backward()</span>
<span id="cb46-11">    </span>
<span id="cb46-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad(): update_weights(weights, lr)</span>
<span id="cb46-13">    </span>
<span id="cb46-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb46-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb46-16">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> '</span>)</span>
<span id="cb46-17"></span>
<span id="cb46-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_model(X, target, epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb46-19">    torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">442</span>)</span>
<span id="cb46-20">    coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_weights(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb46-21">    </span>
<span id="cb46-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs): </span>
<span id="cb46-23">        one_epoch(X, coeffs, target, lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose)</span>
<span id="cb46-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> coeffs</span></code></pre></div>
</div>
<p>Try out the functions if you like (not shown).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">calc_loss(X_sc, init_weights(X_sc.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), target).backward()</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">one_epoch(train_x, init_weights(train_x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), train_y, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>)</span></code></pre></div>
</div>
<p>Now train the model for multiple epochs. The loss drops very quickly before becoming more steady.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">coeffs_est <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(train_x, train_y, epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 1.375618
  0.296216
  0.284019
  0.281221
  0.280271
  0.279923
  0.279794
  0.279746
  0.279728
  0.279721
 </code></pre>
</div>
</div>
<p>Let’s create a function to show our estimated parameters/weights/coefficients in a pretty fashion.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> show_coeffs(estimates): </span>
<span id="cb51-2">  coef_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(all_features, estimates.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).numpy()))</span>
<span id="cb51-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.DataFrame(coef_dict, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]).T</span>
<span id="cb51-4"></span>
<span id="cb51-5">show_coeffs(coeffs_est)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               value
Age        -0.090825
SibSp      -0.054449
Parch      -0.016111
LogFare     0.046320
Sex_male   -0.406538
Sex_female -0.171426
Pclass_1    0.408707
Pclass_2    0.335766
Pclass_3    0.329800
Embarked_C  0.057091
Embarked_Q  0.032813
Embarked_S  0.039464</code></pre>
</div>
</div>
</section>
<section id="measuring-accuracy" class="level3">
<h3 class="anchored" data-anchor-id="measuring-accuracy">Measuring Accuracy</h3>
<p>It’s one thing to get accuracy on the trained data, but a better estimate of model performance is to measure it on our test/validation data. The following function will convert our estimates to a binary value like our target, and compares them to the target. Depending on how you did your training setup, it might be pretty bad or at least better than guessing.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> acc(X, weights, target): </span>
<span id="cb53-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (target.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (calc_preds(X, weights) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>().mean()</span>
<span id="cb53-3"></span>
<span id="cb53-4">acc(train_x, coeffs_est, train_y), acc(valid_x, coeffs_est, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(tensor(0.7051), tensor(0.6425))</code></pre>
</div>
</div>
</section>
<section id="using-sigmoid" class="level3">
<h3 class="anchored" data-anchor-id="using-sigmoid">Using sigmoid</h3>
<p>Nothing about the previous setup actually produces a result on the probability scale, so basing a cutoff of .5 is meaningless. you can inspect them and might see values are above 1 or below zero, which we generally don’t want<sup>8</sup>. However we do have a solution. The <em>sigmoid function</em><sup>9</sup> allows us to transform our predictions to values between 0 and 1, i.e.&nbsp;probabilities in this context, and in particular, the probability of survival. Then our <span class="func">acc</span> function will be more appropriate, where any probability &gt; .5 will be given a value of 1 (or <code>True</code> technically), while others will be 0/<code>False</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_preds(X, weights):</span>
<span id="cb55-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.sigmoid((X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>weights).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<p>We also will do more iterations, and fiddle with the learning rate (a.k.a. step size)</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">coeffs_est <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(</span>
<span id="cb56-2">  train_x,</span>
<span id="cb56-3">  train_y,</span>
<span id="cb56-4">  epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb56-5">  lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb56-6">  verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb56-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 0.314158
  0.154329
  0.154237
  0.154232
  0.154232
 </code></pre>
</div>
</div>
<p>Not too shabby!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">acc(train_x, coeffs_est, train_y), acc(valid_x, coeffs_est, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(tensor(0.7823), tensor(0.7989))</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">show_coeffs(coeffs_est)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               value
Age        -0.516476
SibSp      -0.423656
Parch      -0.179623
LogFare     0.396468
Sex_male   -0.927410
Sex_female  0.349448
Pclass_1    0.713895
Pclass_2    0.320935
Pclass_3    0.078919
Embarked_C  0.107378
Embarked_Q  0.082943
Embarked_S -0.036137</code></pre>
</div>
</div>
<p>In implementing the sigmoid, let’s go ahead and optimize how we calculate the predictions using a matrix shorthand for getting the predictions (which is also much more efficient/faster)<sup>10</sup>. To do this, the coefficients will need to be a column vector, so we change our <span class="func">init_coeffs</span> function slightly<sup>11</sup>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_preds(X, weights): </span>
<span id="cb62-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.sigmoid(X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>weights)</span>
<span id="cb62-3"></span>
<span id="cb62-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_coeffs(n_wts): </span>
<span id="cb62-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (torch.rand(n_wts, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>).requires_grad_()</span></code></pre></div>
</div>
<p>Now our functions are more like the mathematical notation we’d usually see for linear regression.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D%20=%20X%5Cbeta"></p>
</section>
<section id="compare-to-linearlogistic-regression" class="level3">
<h3 class="anchored" data-anchor-id="compare-to-linearlogistic-regression">Compare to Linear/Logistic Regression</h3>
<p>Before getting too excited, let’s compare our results to basic linear and logistic regression. The linear regression is more like our model before using the sigmoid transformation, while the logistic is more like when we used it. Depending on your settings, the logistic regression is probably doing better at this point.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> linear_model</span>
<span id="cb63-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb63-3"></span>
<span id="cb63-4"></span>
<span id="cb63-5">reg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear_model.LinearRegression()</span>
<span id="cb63-6">reg.fit(train_x, train_y)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-1 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: #000;
  --sklearn-color-text-muted: #666;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-1 {
  color: var(--sklearn-color-text);
}

#sk-container-id-1 pre {
  padding: 0;
}

#sk-container-id-1 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-1 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-1 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-1 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-1 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-1 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-1 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-1 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-1 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-1 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-1 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-1 label.sk-toggleable__label {
  cursor: pointer;
  display: flex;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
  align-items: start;
  justify-content: space-between;
  gap: 0.5em;
}

#sk-container-id-1 label.sk-toggleable__label .caption {
  font-size: 0.6rem;
  font-weight: lighter;
  color: var(--sklearn-color-text-muted);
}

#sk-container-id-1 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-1 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-1 div.sk-label label.sk-toggleable__label,
#sk-container-id-1 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-1 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-1 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-1 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-1 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-1 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-1 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 0.5em;
  text-align: center;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-1 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-1 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-1 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-1 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked=""><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>LinearRegression</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html">?<span>Documentation for LinearRegression</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></div></label><div class="sk-toggleable__content fitted"><pre>LinearRegression()</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">acc(valid_x, coeffs_est, valid_y), acc(valid_x, reg.coef_.T, valid_y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(tensor(0.7989), tensor(0.7821))</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">reg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linear_model.LogisticRegression()</span>
<span id="cb66-2">reg.fit(train_x, train_y)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-2 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: #000;
  --sklearn-color-text-muted: #666;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-2 {
  color: var(--sklearn-color-text);
}

#sk-container-id-2 pre {
  padding: 0;
}

#sk-container-id-2 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-2 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-2 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-2 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-2 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-2 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-2 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-2 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-2 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-2 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-2 label.sk-toggleable__label {
  cursor: pointer;
  display: flex;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
  align-items: start;
  justify-content: space-between;
  gap: 0.5em;
}

#sk-container-id-2 label.sk-toggleable__label .caption {
  font-size: 0.6rem;
  font-weight: lighter;
  color: var(--sklearn-color-text-muted);
}

#sk-container-id-2 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-2 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-2 div.sk-label label.sk-toggleable__label,
#sk-container-id-2 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-2 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-2 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-2 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-2 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 0.5em;
  text-align: center;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-2 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-2 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-2 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-2 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked=""><label for="sk-estimator-id-2" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>LogisticRegression</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html">?<span>Documentation for LogisticRegression</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></div></label><div class="sk-toggleable__content fitted"><pre>LogisticRegression()</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">accuracy_score(valid_y.numpy(), reg.predict(valid_x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.7821229050279329</code></pre>
</div>
</div>
<p>It looks like our coefficient estimates are similar to the logistic regression ones.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">show_coeffs(coeffs_est).assign(logreg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(reg.coef_.T, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>               value  logreg
Age        -0.516476 -0.4799
SibSp      -0.423656 -0.4191
Parch      -0.179623 -0.1265
LogFare     0.396468  0.3441
Sex_male   -0.927410 -0.6262
Sex_female  0.349448  0.6262
Pclass_1    0.713895  0.3941
Pclass_2    0.320935  0.0675
Pclass_3    0.078919 -0.3945
Embarked_C  0.107378  0.0546
Embarked_Q  0.082943  0.0655
Embarked_S -0.036137 -0.0890</code></pre>
</div>
</div>
</section>
</section>
<section id="a-neural-network" class="level2">
<h2 class="anchored" data-anchor-id="a-neural-network">A Neural Network</h2>
<p><img src="https://m-clark.github.io/img/nnet.png" style="display:block; margin: 0 auto; width:33%"></p>
<p>At this point we’ve basically reproduced a general linear model. A <em>neural network</em>, on the other hand, has from one to many <em>hidden layers</em> of varying types in between input and output. Let’s say we have a single layer with two nodes. For a <em>fully connected</em> or <em>dense</em> network, we’d need weights to map our features to each node of the hidden layer (<code>n_wts</code> * <code>n_hidden</code> parameters total), and then another set of weights to map the hidden nodes to our next layer, which is our output, basically creating the predicted values. You can think of it as a second hidden layer with a single output node. With additional hidden nodes we add more complexity, but also flexibility, to the model. But this may come at a price, e.g.&nbsp;more difficulty with training due to the additional parameters that have to be estimated.</p>
<p>So basically we need matrices of weights, and the following function allows us to create those. We also add a <em>bias/intercept/constant</em> for the hidden-to-output processing. In the first layer, we divide the weights by <code>n_hidden</code> to create sums at the next layer that are of similar magnitude as the inputs. In general though, there are many ways to <a href="https://machinelearningmastery.com/weight-initialization-for-deep-learning-neural-networks/">initialize weights</a>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_weights(n_wts, n_hidden <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb71-2">    layer1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.rand(n_wts, n_hidden) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n_hidden <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n_wts x n_hidden matrix of weights</span></span>
<span id="cb71-3">    layer2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(n_hidden, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n_hidden weights</span></span>
<span id="cb71-4">    const  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]                               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># constant</span></span>
<span id="cb71-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> layer1.requires_grad_(), layer2.requires_grad_(), const.requires_grad_()</span></code></pre></div>
</div>
<p>Now we revise our <span class="func">calc_preds</span> function to incorporate all the weights. Initially, we extract the different sets of weights that are estimated by the model. For the original inputs, we multiply them by the layer 1 weights and sum. Then we apply a transformation to them to induce nonlinearity. Typical approaches are the sigmoid function we used before, hyperbolic tangent, and, probably the most common, the <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)">relu</a>. The original notebook used relu, while I use a more recent one called <em>Mish</em>, which is a variant of relu. The hidden layer nodes then get multiplied by their respective weights and summed with the constant added. We then use our sigmoid function to get the probability scale as before.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb72-2"></span>
<span id="cb72-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_preds(X, weights):</span>
<span id="cb72-4">    l1, l2, const <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights</span>
<span id="cb72-5">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.mish(X<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>l1)</span>
<span id="cb72-6">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>l2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> const</span>
<span id="cb72-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.sigmoid(res).flatten()</span></code></pre></div>
</div>
<p>With additional sets of weights, we use an update loop.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(weights, lr):</span>
<span id="cb73-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> weights:</span>
<span id="cb73-3">        layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb73-4">        layer.grad.zero_()</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">coeffs_est <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(train_x, train_y, epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 0.325837
  0.155810
  0.141485
  0.137652
  0.136034
 </code></pre>
</div>
</div>
<p>At this point we’re doing a little bit better in general, and even better than standard logistic regression on the test set!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">acc(train_x, coeffs_est, train_y), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb76-2">acc(valid_x, coeffs_est, valid_y), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb76-3">accuracy_score(valid_y.numpy(), reg.predict(valid_x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(tensor(0.8160), tensor(0.8045), 0.7821229050279329)</code></pre>
</div>
</div>
</section>
<section id="deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="deep-learning">Deep Learning</h2>
<p>We previously used a single hidden layer, but we want to go deeper! That’s the whole point of deep learning right? The following modifies our previous functions to allow for an arbitrary number of layers. You’ll note there are some hacks to get the weights in a good way for each layer<sup>12</sup>, but you normally wouldn’t have to do that on your own, since most tools will provide sensible modifications.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> one_epoch(X, weights, target, lr, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb78-2">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_loss(X, weights, target)</span>
<span id="cb78-3">    loss.backward()</span>
<span id="cb78-4">    </span>
<span id="cb78-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad(): update_weights(weights, lr)</span>
<span id="cb78-6">    </span>
<span id="cb78-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb78-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb78-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: 3f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> '</span>)</span>
<span id="cb78-10"></span>
<span id="cb78-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># change loss to binary</span></span>
<span id="cb78-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_loss(X, weights, target, which <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l2'</span>):</span>
<span id="cb78-13">    preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calc_preds(X, weights)</span>
<span id="cb78-14"></span>
<span id="cb78-15">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.BCELoss()</span>
<span id="cb78-16"></span>
<span id="cb78-17">    L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss(preds, target.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>())</span>
<span id="cb78-18"></span>
<span id="cb78-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span>(L)</span>
<span id="cb78-20"></span>
<span id="cb78-21"></span>
<span id="cb78-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_weights(n_wts, hiddens):  </span>
<span id="cb78-23">    sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [n_wts] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> hiddens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb78-24">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sizes)</span>
<span id="cb78-25">    layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(torch.rand(sizes[i], sizes[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>sizes[i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb78-26">    consts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(torch.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb78-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>consts: l.requires_grad_()</span>
<span id="cb78-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> layers, consts</span>
<span id="cb78-29"></span>
<span id="cb78-30"></span>
<span id="cb78-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> calc_preds(X, weights):</span>
<span id="cb78-32">    layers, consts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights</span>
<span id="cb78-33">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layers)</span>
<span id="cb78-34">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X</span>
<span id="cb78-35">    </span>
<span id="cb78-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(layers):</span>
<span id="cb78-37">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> consts[i]</span>
<span id="cb78-38">    </span>
<span id="cb78-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: </span>
<span id="cb78-40">      res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.mish(res)</span>
<span id="cb78-41">      </span>
<span id="cb78-42">    </span>
<span id="cb78-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.sigmoid(res).flatten()</span>
<span id="cb78-44"></span>
<span id="cb78-45"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_weights(weights, lr):</span>
<span id="cb78-46">    layers, consts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights</span>
<span id="cb78-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> layer <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> consts:</span>
<span id="cb78-48">        layer.sub_(layer.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lr)</span>
<span id="cb78-49">        layer.grad.zero_()</span>
<span id="cb78-50"></span>
<span id="cb78-51"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train_model(X, target, hiddens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span>, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb78-52">    torch.manual_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">442</span>)</span>
<span id="cb78-53">    coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_weights(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], hiddens)</span>
<span id="cb78-54">    </span>
<span id="cb78-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs): </span>
<span id="cb78-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb78-57">            one_epoch(X, coeffs, target, lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr, verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> verbose, i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i)</span>
<span id="cb78-58">    </span>
<span id="cb78-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> coeffs</span></code></pre></div>
</div>
<p>With everything set up, let’s do some deep linear modeling! You can play around with the number of hidden layers, number of nodes and other settings. Feel free to explore!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">coeffs_est <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_model(</span>
<span id="cb79-2">  train_x,</span>
<span id="cb79-3">  train_y,</span>
<span id="cb79-4">  hiddens <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>],</span>
<span id="cb79-5">  epochs  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,</span>
<span id="cb79-6">  lr      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>,</span>
<span id="cb79-7">  verbose <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb79-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> 5.123790
  0.666971
  0.653124
  0.640325
  0.628476
  0.617496
  0.607313
  0.597861
  0.589081
  0.580918
  0.573322
  0.566249
  0.559658
  0.553510
  0.547772
  0.542413
  0.537403
  0.532715
  0.528326
  0.524212
  0.520354
  0.516733
  0.513330
  0.510130
  0.507118
  0.504281
  0.501605
  0.499080
  0.496695
  0.494439
  0.492305
  0.490283
  0.488366
  0.486547
  0.484820
  0.483178
  0.481616
  0.480129
  0.478712
  0.477361
  0.476072
  0.474840
  0.473663
  0.472538
  0.471461
  0.470429
  0.469440
  0.468493
  0.467583
  0.466710
 </code></pre>
</div>
</div>
<p>Hooray! Our best model yet (at least tied).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">pd.DataFrame({</span>
<span id="cb81-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc_train'</span>: acc(train_x, coeffs_est, train_y).flatten(), </span>
<span id="cb81-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc_test'</span>: acc(valid_x, coeffs_est, valid_y).flatten(), </span>
<span id="cb81-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc_test_glm'</span>: accuracy_score(valid_y.numpy(), (reg.predict(valid_x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>))</span>
<span id="cb81-5">}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       acc_train  acc_test  acc_test_glm
value    0.77809  0.804469      0.782123</code></pre>
</div>
</div>
</section>
<section id="the-elephant-in-the-room" class="level2">
<h2 class="anchored" data-anchor-id="the-elephant-in-the-room">The Elephant in the Room</h2>
<p>As noted in my previous posts [<a href="https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/">1</a>, <a href="https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/">2</a>], probably your biggest challenge in implementing a deep learning model for tabular data, one with mixed data types and other complexities, is beating an off the shelf boosting model. Here is a quick demo with <span class="pack">lightgbm</span>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier</span>
<span id="cb83-2"></span>
<span id="cb83-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(</span>
<span id="cb83-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n_estimators = 500,  # the sorts of parameters you can play with (many more!)</span></span>
<span id="cb83-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max_depth    = 4,</span></span>
<span id="cb83-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reg_alpha    = .1</span></span>
<span id="cb83-7">)</span>
<span id="cb83-8"></span>
<span id="cb83-9">model.fit(train_x, train_y)</span></code></pre></div>
<div class="cell-output-display">
<style>#sk-container-id-3 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: #000;
  --sklearn-color-text-muted: #666;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-3 {
  color: var(--sklearn-color-text);
}

#sk-container-id-3 pre {
  padding: 0;
}

#sk-container-id-3 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-3 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-3 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-3 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-3 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-3 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-3 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-3 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-3 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-3 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-3 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-3 label.sk-toggleable__label {
  cursor: pointer;
  display: flex;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
  align-items: start;
  justify-content: space-between;
  gap: 0.5em;
}

#sk-container-id-3 label.sk-toggleable__label .caption {
  font-size: 0.6rem;
  font-weight: lighter;
  color: var(--sklearn-color-text-muted);
}

#sk-container-id-3 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-3 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-3 div.sk-label label.sk-toggleable__label,
#sk-container-id-3 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-3 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-3 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-3 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-3 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-3 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-3 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 0.5em;
  text-align: center;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-3 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-3 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-3 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-3 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</style><div id="sk-container-id-3" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>LGBMClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" checked=""><label for="sk-estimator-id-3" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>LGBMClassifier</div></div><div><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></div></label><div class="sk-toggleable__content fitted"><pre>LGBMClassifier()</pre></div> </div></div></div></div>
</div>
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">model.score(valid_x, valid_y.numpy())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.8491620111731844</code></pre>
</div>
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"></span>
<span id="cb86-2"></span>
<span id="cb86-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sklearn example</span></span>
<span id="cb86-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from sklearn.ensemble import HistGradientBoostingClassifier</span></span>
<span id="cb86-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb86-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># res = HistGradientBoostingClassifier().fit(train_x.numpy(), train_y.numpy())</span></span>
<span id="cb86-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span></span>
<span id="cb86-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># res.score(valid_x.numpy(), valid_y.numpy())</span></span></code></pre></div>
</div>
<p>No tuning at all, and we’re already doing significantly better. Granted, if you use a packaged DL model for tabular data like the one in <span class="pack">fastai</span>, you should be doing better than our little demo. Even then though, you may still find the boosting results tough to beat.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">df_accs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({ </span>
<span id="cb87-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc_test_dl'</span>:   acc(valid_x, coeffs_est, valid_y).flatten(), </span>
<span id="cb87-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc_test_glm'</span>:  accuracy_score(valid_y.numpy(), (reg.predict(valid_x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)),</span>
<span id="cb87-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc_test_lgbm'</span>: model.score(valid_x, valid_y.numpy())</span>
<span id="cb87-5">}, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value'</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb87-6"></span>
<span id="cb87-7">df_accs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       acc_test_dl  acc_test_glm  acc_test_lgbm
value       0.8045        0.7821         0.8492</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">df_perc_improvement <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (df_accs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df_accs.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># % improvement</span></span>
<span id="cb89-2">df_perc_improvement</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       acc_test_dl  acc_test_glm  acc_test_lgbm
value     2.864075           0.0       8.579466</code></pre>
</div>
</div>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This was a lot of work to do slightly better than a logistic regression! However, there is a lot going on with a typical DL model that would likely prove even better. But it also serves as a reminder to have a suitable baseline, and as we saw with the lightgbm model, it can take little effort to do very well without deep learning. Hopefully though, the peek behind the scenes to do some ‘deep’ linear modeling can make it more accessible for you.</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-clark2022dl4tab2" class="csl-entry">
Clark, Michael. 2022a. <span>“Deep Learning for Tabular Data.”</span> <a href="https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/">https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/</a>.
</div>
<div id="ref-clark2022dl4tab1" class="csl-entry">
———. 2022b. <span>“This Is Definitely Not All You Need.”</span> <a href="https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/">https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/</a>.
</div>
<div id="ref-howard2022neuralnet" class="csl-entry">
Howard, Jeremy. 2022a. <span>“How Does a Neural Net Really Work?”</span> <em>Kaggle</em>. <a href="https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work">https://www.kaggle.com/code/jhoward/how-does-a-neural-net-really-work</a>.
</div>
<div id="ref-howard2022linreg" class="csl-entry">
———. 2022b. <span>“Linear Model and Neural Net from Scratch.”</span> <em>Kaggle</em>. <a href="https://www.kaggle.com/code/jhoward/linear-model-and-neural-net-from-scratch">https://www.kaggle.com/code/jhoward/linear-model-and-neural-net-from-scratch</a>.
</div>
<div id="ref-howard2022neuralnet2" class="csl-entry">
———. 2022c. <span>“What Is Torch.nn Really?”</span> <em>Kaggle</em>. <a href="https://pytorch.org/tutorials/beginner/nn_tutorial.html">https://pytorch.org/tutorials/beginner/nn_tutorial.html</a>.
</div>
<div id="ref-raschka2022chrono" class="csl-entry">
Raschka, Sebastian. 2022. <span>“A Short Chronology of Deep Learning for Tabular Data.”</span> <a href="https://sebastianraschka.com/blog/2022/deep-learning-for-tabular-data.html">https://sebastianraschka.com/blog/2022/deep-learning-for-tabular-data.html</a>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I won’t actually use <span class="pack">fastai</span>, since they aren’t up to supporting M1/2 Macs very well. I think it was only used for the train/test data split anyway. I would rant a bit about this, but a lot of <span class="pack">fastai</span> is geared toward non-local computing, and the fault is really with Apple and NVidia as near as I can tell.↩︎</p></li>
<li id="fn2"><p>I’m also not going to go into broadcasting, submitting to Kaggle, and other things that I don’t think are necessary for our purposes here.↩︎</p></li>
<li id="fn3"><p>Just as an aside, this sort of approach to impute has largely been frowned upon in the statistical world for decades for numerous (and valid) reasons, but we just want something quick and dirty here, and sometimes that’s enough.↩︎</p></li>
<li id="fn4"><p>Even though every modeling tool requires this, strangely very few in the Python world offer options for automatic handling of such things, but it’s getting better.↩︎</p></li>
<li id="fn5"><p>We actually aren’t too far removed from this in our model coming up, the main difference is that we don’t treat the categorical feature part of the model separately.↩︎</p></li>
<li id="fn6"><p>I’ll not perpetuate calling features/predictor variables that are clearly not independent as independent. That nomenclature really only works for randomized experiments, and that is definitely not the case here.↩︎</p></li>
<li id="fn7"><p>You could use <span class="func">torch.randn</span> to get standard normal values, and often times we’ll even start with just zeros if we really are just doing a standard linear model.↩︎</p></li>
<li id="fn8"><p>Unless you are an economist, in which case you call it a <em>linear probability model</em> and ignore the ridiculous predictions because you have very fine standard errors.↩︎</p></li>
<li id="fn9"><p>A lot of R folks seem unaware that the base R <span class="func">plogis</span> function accomplishes this.↩︎</p></li>
<li id="fn10"><p>The <code>@</code> operator is essentially the dot product, so <code>x@y</code> is <code>np.dot(x, y)</code>↩︎</p></li>
<li id="fn11"><p>The <span class="pack">fastai</span> demo also changes the target to a column vector, but this doesn’t seem necessary.↩︎</p></li>
<li id="fn12"><p>And they probably aren’t as good for the changes I’ve made.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{clark2022,
  author = {Clark, Michael},
  title = {Deep {Linear} {Models}},
  date = {2022-10-10},
  url = {https://m-clark.github.io/posts/2022-09-deep-linear-models/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-clark2022" class="csl-entry quarto-appendix-citeas">
Clark, Michael. 2022. <span>“Deep Linear Models.”</span> October 10,
2022. <a href="https://m-clark.github.io/posts/2022-09-deep-linear-models/">https://m-clark.github.io/posts/2022-09-deep-linear-models/</a>.
</div></div></section></div> ]]></description>
  <category>deep learning</category>
  <category>boosting</category>
  <category>GLM</category>
  <category>regression</category>
  <category>machine learning</category>
  <guid>https://m-clark.github.io/posts/2022-09-deep-linear-models/</guid>
  <pubDate>Mon, 10 Oct 2022 04:00:00 GMT</pubDate>
  <media:content url="https://m-clark.github.io/img/nnet.png" medium="image" type="image/png" height="120" width="144"/>
</item>
<item>
  <title>Exploring Time</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2021-05-time-series/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>NB: This post was revisited when updated the website, and some changes were required. Attempts to keep things consistent were made, but if you feel you’ve found an issue, please post it at <a href="http://github.com/m-clark/m-clark.github.io/issues">GitHub</a>.</p>
</blockquote>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<blockquote class="blockquote">
<p>This post was mostly complete around May 2021, but for various reasons not actually posted until August of 2022. I haven’t changed much aside from adding a section on boosting, and have used the results I conjured up previously (for the most part). However, many package updates since then may mean that parts of the code may not work as well, especially for the torch code. I would also recommend modeltime as starting point for implementing a variety of model approaches for time series data with R. It was still pretty new when this was first written, but has many new features and capabilities, and could do some version of the models shown here.</p>
</blockquote>
<p>It is extremely common to have data that exists over a period of time. For example, we might have yearly sports statistics, daily manufacturing records, server logs that might be occurring many times per second, and similar. There are many approaches we could use to model the data in these scenarios. When there are few time points and they are clustered within other units, like repeated observations of exercise data for many individuals, we often use tools like <a href="https://m-clark.github.io/mixed-models-with-R/">mixed models</a> for example, and even with many observations in a series, we can still use tools like that. But sometimes there may be no natural clustering, or we might want to use other approaches to handle additional complexity.</p>
<p>This post is inspired by a co-worker’s efforts in using PyTorch to analyze Chicago Transit data. <a href="https://twitter.com/codydirks">Cody Dirks</a> wrote <a href="https://www.strong.io/blog/forecasting-public-transport-utilization-in-chicago">a post</a> where he used a <a href="https://github.com/strongio/torchcast">Python module</a> developed by our group at <a href="https://strong.io/">Strong Analytics</a> to analyze the ridership across all the ‘<a href="https://en.wikipedia.org/wiki/Chicago_%22L%22">L</a>’. This post can be seen as a demonstration of some simpler models which might also be viable for a given situation such as this, allowing for quick dives, or even as ends in themselves.</p>
</section>
<section id="outline" class="level2">
<h2 class="anchored" data-anchor-id="outline">Outline</h2>
<p>The models we’ll go through are the following:</p>
<ul>
<li>Error models and random effects</li>
<li>GAM</li>
<li>More elaborate time series with seasonal and other effects</li>
<li>Boosting and Deep learning</li>
</ul>
<p>In what follows I will show some more detailed code in the beginning, but won’t show it later for conciseness, focusing mostly just on the basic model code. You can always find the code for these posts on my <a href="https:://github.com/m-clark/m-clark.github.io">GitHub</a>.</p>
</section>
<section id="quick-summary" class="level2">
<h2 class="anchored" data-anchor-id="quick-summary">Quick Summary</h2>
<ul>
<li><p>Classical econometrics approaches like ARIMA models may take notable effort to match the flexibility of other approaches one might take with time series. It’s also difficult to believe a specific lag/ma number will hold up with any data change.</p></li>
<li><p>GAMs extend mixed models, and should probably be preferred if a probabilistic approach is desired. Prophet-style approaches would likely take notable effort and still likely lack performance, without adding interpretability.</p></li>
<li><p>For black box methods, boosting can do very well without much feature engineering, but possibly take a bit more for parameter tuning. Deep learning methods may be your best bet given data size and other data modeling needs.</p></li>
</ul>
</section>
<section id="data-description" class="level2">
<h2 class="anchored" data-anchor-id="data-description">Data Description</h2>
<p>As noted in <a href="https://www.strong.io/blog/forecasting-public-transport-utilization-in-chicago">Cody’s post</a>, over 750,000 people use the Chicago Transit Authority’s ‘L’ system to get around the city. There are 8 interconnected rail lines named after colors- the Red, Blue, Green, Brown, Pink, Orange, Purple, and Yellow, 145 entry/exit stations, and over 2,300 combined trips by its railcars every day<sup>1</sup>.</p>
<p>The city of Chicago provides ridership data that can be accessed publicly.</p>
<ul>
<li><a href="https://data.cityofchicago.org/Transportation/CTA-Ridership-L-Station-Entries-Daily-Totals/5neh-572f">ridership</a></li>
<li><a href="https://data.cityofchicago.org/Transportation/CTA-System-Information-List-of-L-Stops/8pix-ypme">station info</a></li>
</ul>
<p>In Cody’s exploration, he added pertinent information regarding weather, sporting events, and more. You can access the <a href="https://github.com/m-clark/m-clark.github.io/tree/master/data/time-series/processed_df.csv">processed data</a>.</p>
<p>For our demonstrations we have daily ridership from 2012-2018, and we will use a variety of methods to model this. We will use a normalized ride count (mean of 0, standard deviation of 1) as our target variable.</p>
<section id="import-setup" class="level3">
<h3 class="anchored" data-anchor-id="import-setup">Import &amp; Setup</h3>
<p>To get things started we’ll use the tidyverse for some additional data processing, and lubridate for any date processing, for example, converting to weekdays.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data Processing</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Misc</span></span>
<span id="cb1-8"></span>
<span id="cb1-9">START_DT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2008-06-01'</span></span>
<span id="cb1-10">END_DT   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018-12-31'</span></span>
<span id="cb1-11">SPLIT_DT <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-06-01'</span></span></code></pre></div>
</div>
<section id="main-data" class="level5">
<h5 class="anchored" data-anchor-id="main-data">Main data</h5>
<p>I start with data having already been processed, but as mentioned the source is publicly available. I use <span class="pack" style="">data.table</span> to read it in more quickly, but it’s default date class can cause issues with other packages, so I deal with that. I also extract the year, month, weekday, etc.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> data.table<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fread</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../../data/time-series/processed_df.csv'</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3">df_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">contains</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_attributes'</span>), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(tsun<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>wt22)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb2-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(date), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove IDATE class</span></span>
<span id="cb2-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rides_log =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(rides),</span>
<span id="cb2-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">year</span>(date),</span>
<span id="cb2-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year_fac  =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(year),</span>
<span id="cb2-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month     =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb2-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">day       =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wday</span>(date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>),</span>
<span id="cb2-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year_day  =</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">yday</span>(date),</span>
<span id="cb2-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line      =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(line),</span>
<span id="cb2-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">snow_scaled =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(snow)[, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(line),</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colors =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(colors <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purple_express'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purple4'</span>, colors),</span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">red_line_modernization =</span> </span>
<span id="cb2-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(</span>
<span id="cb2-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">between</span>(date, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013-05-19'</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013-10-20'</span>)), </span>
<span id="cb2-21">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb2-22">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-23">      )</span>
<span id="cb2-24">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(date, line)</span></code></pre></div>
</div>
</section>
</section>
<section id="training-and-validation" class="level3">
<h3 class="anchored" data-anchor-id="training-and-validation">Training and Validation</h3>
<p>We split our data into training and validation sets, such that everything before 2017-06-01 is used for training, while everything after will be used for testing model performance<sup>2</sup>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> SPLIT_DT, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(rides))</span>
<span id="cb3-3"></span>
<span id="cb3-4">df_validate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> SPLIT_DT, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(rides))</span>
<span id="cb3-6"></span>
<span id="cb3-7">red_line_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(line <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10">red_line_validate <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(line <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span></code></pre></div>
</div>
</section>
<section id="other" class="level3">
<h3 class="anchored" data-anchor-id="other">Other</h3>
<p>Holidays are available via the <span class="pack" style="">prophet</span> package, which we’ll be demonstrating a model with later. The data we’re using already has a ‘holiday vs.&nbsp;not’ variable for simplicity, though it comes from a different source. The <span class="pack" style="">prophet</span> version has both the actual date and the observed date counted as a holiday, and I prefer to use both.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">holidays <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> prophet<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>generated_holidays <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'US'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(ds))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">droplevels</span>()</span></code></pre></div>
</div>
<p>We’ll take a quick look at the red line similar to Cody’s post, so we can feel we have the data processed as we should.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/dupe-plot-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>With the data ready to go, we are ready for modeling, so let’s get started!</p>
</section>
</section>
<section id="classical-time-series" class="level2">
<h2 class="anchored" data-anchor-id="classical-time-series">Classical Time Series</h2>
<section id="intro-1" class="level3">
<h3 class="anchored" data-anchor-id="intro-1">Intro</h3>
<p>Classical times series from an econometrics perspective often considers a error model that accounts for the correlation a current observation has with past observations. A traditional example is the so-called <em>autoregressive</em>, or <em>AR</em>, model, which lets a current observation be predicted by past observations up to a certain point. For example, would could start by just using the last observation to predict the current one. Next we extend this to predict the current based on the previous two observations, and so on. How many <em>lags</em> we use is part of the model exploration.</p>
<p><img src="https://latex.codecogs.com/png.latex?y_t%20=%20%5Calpha_1y_%7Bt-1%7D%20+%20%5Cdots%20+%5Calpha_%7Bp%7Dy_%7Bt-p%7D%20+%20%5Cvarepsilon_t"></p>
<p>We can extend this to include not just past observations but also past residuals, called a <em>moving average</em>. So formally, our <em>ARMA</em> (p, q) model now looks like this for an observation <img src="https://latex.codecogs.com/png.latex?y"> at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?y_t%20=%20%5Calpha_1y_%7Bt-1%7D%20+%20%5Cdots%20+%5Calpha_%7Bp%7Dy_%7Bt-p%7D%20+%20(%5Cvarepsilon_t%20+%20%5Ctheta_1%20%5Cvarepsilon_%7Bt-1%7D%20+%20%5Ccdots%20+%5Ctheta_q%20%5Cvarepsilon_%7Bt-q%7D)"></p>
<p>We can also use <a href="https://otexts.com/fpp3/stationarity.html">differencing</a>, for example subtracting the previous time value from the current observation value for all values, to come to the final <a href="https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average"><em>ARIMA</em> (p, d, q) model</a>. See <span class="citation" data-cites="Hyndman2021">Hyndman and Athanasopoulos (2021)</span> for more details.</p>
</section>
<section id="model" class="level3">
<h3 class="anchored" data-anchor-id="model">Model</h3>
<p>Even base R comes with basic time series models such as this. However, as mentioned, we typically don’t know what to set the values of an ARIMA(p, d, q) to. A quick way to explore this is via the <span class="pack" style="">forecast</span> package, which will search over the various hyperparameters and select one based on AIC. Note that <span class="pack" style="">fable</span>, a package we will be using later, will also allow such an approach, and if you’d like to go ahead and start using it I show some commented code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">model_arima <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> forecast<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auto.arima</span>(</span>
<span id="cb5-2">  red_line_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rides_scaled</span>
<span id="cb5-3">)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model_arima = red_line_train %&gt;%</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   select(date, rides_scaled) %&gt;%</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   tsibble::as_tsibble() %&gt;%</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   fabletools::model(fable::ARIMA(</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     rides_scaled ~ 0 + PDQ(0,0,0),</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     stepwise = FALSE,</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     approximation = FALSE</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ))</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fabletools::report(model_arima)</span></span></code></pre></div>
</div>
</section>
<section id="explore" class="level3">
<h3 class="anchored" data-anchor-id="explore">Explore</h3>
<p>In this case we have a selected AR of 3 and MA of 4 for the centered value. But looking at the predictions, we can see this is an almost useless result for any number of days out, and does little better than guessing.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidy</span>(model_arima)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">term</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">estimate</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">std.error</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">ar1</td>
<td style="text-align: right;">0.238</td>
<td style="text-align: right;">0.048</td>
</tr>
<tr class="even">
<td style="text-align: left;">ar2</td>
<td style="text-align: right;">-0.285</td>
<td style="text-align: right;">0.035</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ar3</td>
<td style="text-align: right;">0.354</td>
<td style="text-align: right;">0.043</td>
</tr>
<tr class="even">
<td style="text-align: left;">ma1</td>
<td style="text-align: right;">-0.725</td>
<td style="text-align: right;">0.046</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ma2</td>
<td style="text-align: right;">-0.189</td>
<td style="text-align: right;">0.046</td>
</tr>
<tr class="even">
<td style="text-align: left;">ma3</td>
<td style="text-align: right;">-0.575</td>
<td style="text-align: right;">0.029</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ma4</td>
<td style="text-align: right;">0.552</td>
<td style="text-align: right;">0.025</td>
</tr>
</tbody>
</table>


</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot(acf(residuals(model_arima))) # weekly autocorrelation still exists</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">red_line_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slice</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model_arima, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.ahead =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pred) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mutate(pred = forecast(model_arima, h = 30)$.mean) %&gt;%</span></span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, rides_scaled)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pred), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'darkred'</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/arima-explore-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We’ll use <span class="pack" style="">yardstick</span> to help us evaluate performance for this and subsequent models. In this case however, the visualization told us enough- a basic ARIMA isn’t going cut it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(yardstick)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this function will be used for all subsequent models!</span></span>
<span id="cb8-4">metric_score <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metric_set</span>(rmse, mae, rsq) </span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># validation</span></span>
<span id="cb8-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb8-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model_arima, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> red_line_validate, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.ahead =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pred,</span>
<span id="cb8-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">observed =</span> red_line_validate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rides_scaled[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>]</span>
<span id="cb8-10">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb8-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metric_score</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> observed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> pred)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.632</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.572</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.132</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>One nice thing about the <span class="pack" style="">forecast</span> package is that it can include additional features via the <code>xreg</code> argument, which is exactly what we need- additional information. Now our model looks something like this, where <img src="https://latex.codecogs.com/png.latex?X"> is our model matrix of features and <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> their corresponding regression weights.</p>
<p><img src="https://latex.codecogs.com/png.latex?y_t%20=%20X_t%5Cbeta%20+%20%5Calpha_1y_%7Bt-1%7D%20+%20%5Cdots%20+%5Calpha_%7Bp%7Dy_%7Bt-p%7D%20+%20(%5Cvarepsilon_t%20+%20%5Ctheta_1%20%5Cvarepsilon_%7Bt-1%7D%20+%20%5Ccdots%20+%5Ctheta_q%20%5Cvarepsilon_%7Bt-q%7D)"></p>
<p>Adding these is not exactly straightforward, since it requires a matrix rather than a data frame, but this is not too big a deal once you are used to creating model matrices.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">mm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model.matrix</span>(</span>
<span id="cb9-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb9-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> red_line_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(is_weekend<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>is_sox_game, tmax_scaled, prcp_scaled, red_line_modernization)</span>
<span id="cb9-5">)</span>
<span id="cb9-6"></span>
<span id="cb9-7">model_arima_xreg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> forecast<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">auto.arima</span>(</span>
<span id="cb9-8">  red_line_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rides_scaled,</span>
<span id="cb9-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.p =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb9-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.q =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb9-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xreg  =</span> mm</span>
<span id="cb9-12">)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">term</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">estimate</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">std.error</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">ar1</td>
<td style="text-align: right;">-0.444</td>
<td style="text-align: right;">0.018</td>
</tr>
<tr class="even">
<td style="text-align: left;">ar2</td>
<td style="text-align: right;">-0.430</td>
<td style="text-align: right;">0.018</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ar3</td>
<td style="text-align: right;">-0.370</td>
<td style="text-align: right;">0.019</td>
</tr>
<tr class="even">
<td style="text-align: left;">ar4</td>
<td style="text-align: right;">-0.325</td>
<td style="text-align: right;">0.019</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ar5</td>
<td style="text-align: right;">-0.312</td>
<td style="text-align: right;">0.019</td>
</tr>
<tr class="even">
<td style="text-align: left;">ar6</td>
<td style="text-align: right;">-0.356</td>
<td style="text-align: right;">0.019</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ar7</td>
<td style="text-align: right;">0.307</td>
<td style="text-align: right;">0.018</td>
</tr>
<tr class="even">
<td style="text-align: left;">ar8</td>
<td style="text-align: right;">-0.051</td>
<td style="text-align: right;">0.017</td>
</tr>
<tr class="odd">
<td style="text-align: left;">is_weekend</td>
<td style="text-align: right;">-1.154</td>
<td style="text-align: right;">0.023</td>
</tr>
<tr class="even">
<td style="text-align: left;">is_holiday</td>
<td style="text-align: right;">-1.045</td>
<td style="text-align: right;">0.021</td>
</tr>
<tr class="odd">
<td style="text-align: left;">is_cubs_game</td>
<td style="text-align: right;">0.208</td>
<td style="text-align: right;">0.015</td>
</tr>
<tr class="even">
<td style="text-align: left;">is_sox_game</td>
<td style="text-align: right;">0.072</td>
<td style="text-align: right;">0.015</td>
</tr>
<tr class="odd">
<td style="text-align: left;">tmax_scaled</td>
<td style="text-align: right;">0.085</td>
<td style="text-align: right;">0.011</td>
</tr>
<tr class="even">
<td style="text-align: left;">prcp_scaled</td>
<td style="text-align: right;">-0.031</td>
<td style="text-align: right;">0.004</td>
</tr>
<tr class="odd">
<td style="text-align: left;">red_line_modernization</td>
<td style="text-align: right;">-0.550</td>
<td style="text-align: right;">0.131</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>This is looking much better! We can also see how notably different the ARMA structure is relative to the previous model. We also see that adding weekend and holiday effects result in a huge drop in ridership as expected, while baseball games and good weather will lead to an increase.</p>
<p>In the following code, we create a model matrix similar to the training data that we can feed into the <span class="func" style="">predict</span> function. The forecast package also offers a <span class="func" style="">glance</span> method if desired.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">nd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> red_line_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(is_weekend<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>is_sox_game, tmax_scaled, prcp_scaled, red_line_modernization) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model.matrix</span>( <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> .)</span>
<span id="cb10-4"></span>
<span id="cb10-5">preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(model_arima_xreg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newxreg =</span> nd, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.ahead =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(red_line_validate))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>pred</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">p_arima_red <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> red_line_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> preds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, rides_scaled)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pred), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rides (scaled)'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ARIMA'</span>)</span>
<span id="cb11-7"></span>
<span id="cb11-8">p_arima_red</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/unnamed-chunk-4-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>And here we can see performance is notably improved (restrict to first 30 obs for a direct comparison to the previous).</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.371</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.282</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.747</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
</section>
<section id="mixed-model-with-ar-structure" class="level2">
<h2 class="anchored" data-anchor-id="mixed-model-with-ar-structure">Mixed model with AR Structure</h2>
<section id="intro-2" class="level3">
<h3 class="anchored" data-anchor-id="intro-2">Intro</h3>
<p>More generally, we can think of that original AR error as a random effect, such that after the linear predictor is constructed, we add a random effect based on the correlation structure desired, in this case, autoregressive. In the mixed model setting, it is actually quite common to use an AR residual structure within a cluster or group, and here we can do so as well, as the data is naturally grouped by line.</p>
<p>To make this a bit more clear, we can state the AR effect more formally as follows for a single line at time <img src="https://latex.codecogs.com/png.latex?t">:</p>
<p><img src="https://latex.codecogs.com/png.latex?z_t%20%20%5Csim%20N(0,%20%5CSigma_%7Bar%7D)"> <img src="https://latex.codecogs.com/png.latex?%5CSigma_%7Bar%7D%20=%20cov(z(s),%20z(t))%20=%20%5Csigma%5E2%5Cexp(-%5Ctheta%7Ct-s%7C)"></p>
<p>Where t,s are different time points, e.g.&nbsp;within a line.</p>
<p>If we were to simulate it for 4 time points, with autocovariance value of .5, we could do so as follows<sup>3</sup>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">n_clusters   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-2">n_timepoints <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb12-3">mu  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-4">var <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not actually used if the value is 1</span></span>
<span id="cb12-5">S <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dist</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n_timepoints))</span>
<span id="cb12-6"></span>
<span id="cb12-7">S</span>
<span id="cb12-8"></span>
<span id="cb12-9">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mvrnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(mu, n_timepoints), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Sigma =</span> S)</span>
<span id="cb12-10"></span>
<span id="cb12-11">z</span></code></pre></div>
</div>
<p>And here is our typical model with a single random effect, e.g.&nbsp;for line:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20y_%7Btl%7D%20%5Csim%20X%5Cbeta%20+%20z%5E%7Bline%7D_%7Bl%7D%20+%20e_%7Btl%7D"> <img src="https://latex.codecogs.com/png.latex?%5Ctextrm%7Bz%7D_%7Bl%7D%20%5Csim%20N(0,%20%5Csigma_l%5E2)"> <img src="https://latex.codecogs.com/png.latex?%5Cepsilon%20%5Csim%20N(0,%20%5Csigma_e%5E2)"></p>
<p>The X may be at either line or observation level, and potentially the <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> could vary by line.</p>
<p>Putting it all together, we’re just adding the AR random effect to the standard mixed model for a single line.</p>
<p><img src="https://latex.codecogs.com/png.latex?%20y_%7Btl%7D%20%5Csim%20X%5Cbeta%20+%20z%5E%7Bar%7D_t%20+z%5E%7Bline%7D_%7Bl%7D%20+%20e_%7Btl%7D"></p>
</section>
<section id="data-prep" class="level3">
<h3 class="anchored" data-anchor-id="data-prep">Data Prep</h3>
<p>So let’s try this! First some minor data prep to add holidays.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">df_train_mixed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(holidays, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">holiday =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(holiday), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(holiday))))</span>
<span id="cb13-5"></span>
<span id="cb13-6">df_validate_mixed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span>(holidays, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'date'</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">holiday =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(holiday), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(holiday))))</span></code></pre></div>
</div>
</section>
<section id="model-1" class="level3">
<h3 class="anchored" data-anchor-id="model-1">Model</h3>
<p>For the model, we can now easily think of it as we do other standard modeling scenarios. Along with standard features, we’ll add random effects for line, day, day x line interaction, etc. Finally we also add an AR random effect. For each line, we have an autoregressive structure for days, such that days right next to each other are correlated, and this correlation tapers off as days are further apart. This is not our only option, but seems straightforward to me.</p>
<p>Depending on what you include in the model, you may have convergence issues, so feel free to reduce the complexity if needed. For example, most of the day effect is captured by weekend vs.&nbsp;not, and a by line year trend wasn’t really necessary. In addition, the way the AR random effect variance is estimated as noted above, this essentially captures the line intercept variance.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">model_mixed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> </span>
<span id="cb14-2">  rides_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> </span>
<span id="cb14-3">  is_weekend <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-4">  is_cubs_game <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-5">  is_sox_game <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-6">  tmax_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-7">  prcp_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb14-8">  snow_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># year_day +</span></span>
<span id="cb14-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ar1</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> day<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>line) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the 0 + is a nuance of tmb's approach</span></span>
<span id="cb14-11">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>holiday) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as RE with all holidays instead of just holiday vs. not</span></span>
<span id="cb14-12">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>year) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>     </span>
<span id="cb14-13">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> red_line_modernization<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>line) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the project shifted ridership from red to other lines</span></span>
<span id="cb14-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1|day) #+ </span></span>
<span id="cb14-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1|line) +</span></span>
<span id="cb14-16">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span>day<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>line) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#+</span></span>
<span id="cb14-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1 + year_day|line)</span></span>
<span id="cb14-18"></span>
<span id="cb14-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glmmTMB)</span>
<span id="cb14-20"></span>
<span id="cb14-21">fit_mixed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glmmTMB</span>(model_mixed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> df_train_mixed)</span></code></pre></div>
</div>
</section>
<section id="explore-1" class="level3">
<h3 class="anchored" data-anchor-id="explore-1">Explore</h3>
<p>The mixed model approach is nice because it is highly interpretable. We get both standard regression coefficients, and variance components to help us understand how the rest of the variance breaks down. For example, I would interpret the following that that line and weekend are the biggest contributors to the variability seen, and that we have high autocorrelation, as expected.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mixedup)</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_model</span>(fit_mixed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">digits =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">extract_cor_structure</span>(fit_mixed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">which_cor =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ar1'</span>)</span></code></pre></div>
</div>
<p>We can visually inspect how well it matches the data. In the following the colored lines are the predictions, while the observed is gray. It looks like performance tapers for more recent time periods, and holiday effects are not as prevalent for some lines (e.g.&nbsp;yellow). The latter could be helped by adding a <code>holiday:line</code> random effect.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(glmmTMB)</span>
<span id="cb16-2"></span>
<span id="cb16-3">p_mixed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate_mixed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">droplevels</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb16-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(fit_mixed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">allow.new.levels=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(date)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb16-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, rides_scaled)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> pred, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">I</span>(colors)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rows =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(line), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'free_y'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rides (scaled)'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mixed'</span>)</span>
<span id="cb16-12"></span>
<span id="cb16-13">p_mixed</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/mixed-vis-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>As before we can measure performance via yardstick. This model does appears to do very well.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># validation</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb17-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(fit_mixed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> df_validate_mixed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">allow.new.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb17-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">observed =</span> df_validate_mixed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rides_scaled</span>
<span id="cb17-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb17-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metric_score</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">truth =</span> observed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">estimate =</span> pred)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.189</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.110</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.965</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>For more on autocorrelation structure in the mixed model setting, <a href="https://m-clark.github.io/mixed-models-with-R/extensions.html#autocorrelation">see my mixed model document here</a><sup>4</sup>.</p>
</section>
</section>
<section id="generalized-additive-models" class="level2">
<h2 class="anchored" data-anchor-id="generalized-additive-models">Generalized Additive Models</h2>
<section id="intro-3" class="level3">
<h3 class="anchored" data-anchor-id="intro-3">Intro</h3>
<p>We can generalize mixed models even further to incorporate nonlinear components, which may include cyclic or other effects. Such models are typically referred to as <a href="https://m-clark.github.io/generalized-additive-models/">generalized additive models</a> (GAMs). AR processes themselves can be seen as a special case of <a href="http://www.gaussianprocess.org/">gaussian processes</a>, which can potentially be approximated via GAMs. As GAMs can accommodate spatial, temporal, nonlinear, and other effects, they are sometimes more generally referred to as <em>structured additive regression models</em>, or STARs.</p>
</section>
<section id="data-prep-1" class="level3">
<h3 class="anchored" data-anchor-id="data-prep-1">Data Prep</h3>
<p>The data prep for the GAM is the same as with the mixed model, so we’ll just use that data.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">df_train_gam <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_train_mixed</span>
<span id="cb18-2"></span>
<span id="cb18-3">df_validate_gam <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate_mixed</span></code></pre></div>
</div>
</section>
<section id="model-2" class="level3">
<h3 class="anchored" data-anchor-id="model-2">Model</h3>
<p>With data in place we are ready to conduct the model. We have numerous options for how we’d like to take this. However, as an example, I tried various smooths, but didn’t really see much difference, which is actually a good thing. For any further improvements we’d likely have to tweak the core model itself. I also use <span class="func" style="">bam</span> for a quicker result, but this isn’t really necessary, as it didn’t even take a minute to run with standard gam. As with the mixed model, we will use holiday as a random effect, but we add the holiday by line interaction since we saw that need. In addition, our year-day by line interaction should help some with the tailing off of more recent predictions.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mgcv)</span>
<span id="cb19-2"></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for year, use year (numeric) or use year_fac, but for latter, it will not be</span></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># able to predict any year not in the training data unless you use</span></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># drop.unused.levels.</span></span>
<span id="cb19-6">model_gam <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> </span>
<span id="cb19-7">  rides_scaled <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> </span>
<span id="cb19-8">  is_weekend <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-9">  is_cubs_game <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-10">  is_sox_game <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(tmax_scaled) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(prcp_scaled) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(snow_scaled) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(red_line_modernization, line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(holiday,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(holiday, line,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(year_fac, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>      </span>
<span id="cb19-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(day,  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(line, day, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'re'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb19-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s</span>(year_day, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by =</span> line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bs =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ds'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fs'</span>))</span>
<span id="cb19-22"></span>
<span id="cb19-23"></span>
<span id="cb19-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will take a while!</span></span>
<span id="cb19-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fit_gam = gam(</span></span>
<span id="cb19-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   model_gam, </span></span>
<span id="cb19-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   data     = df_train_gam,</span></span>
<span id="cb19-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   drop.unused.levels = FALSE, </span></span>
<span id="cb19-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   method   = "REML"</span></span>
<span id="cb19-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># )</span></span>
<span id="cb19-31"></span>
<span id="cb19-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fast even without parallel</span></span>
<span id="cb19-33">fit_gam <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bam</span>(</span>
<span id="cb19-34">  model_gam, </span>
<span id="cb19-35">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data     =</span> df_train_gam,</span>
<span id="cb19-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop.unused.levels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, </span>
<span id="cb19-37">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method   =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fREML"</span>,</span>
<span id="cb19-38">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">discrete =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will fit the model in a second rather than a couple seconds</span></span>
<span id="cb19-39">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nthreads = 8,     # this option assumes a cluster is available. not necessary for this.</span></span>
<span id="cb19-40">)</span></code></pre></div>
</div>
</section>
<section id="explore-2" class="level3">
<h3 class="anchored" data-anchor-id="explore-2">Explore</h3>
<p>As with <span class="pack" style="">glmmTMB</span>, I use a custom function to summarize the model, or extract different components from it. From the initial glance we can see things that we expect (e.g.&nbsp;line and weekend effects are large).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">mixedup<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise_model</span>(fit_gam)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Variance Components:</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>                       Group                 Effect Variance   SD SD_2.5      SD_97.5 Var_prop
                 tmax_scaled              Intercept     0.01 0.09   0.04 2.100000e-01     0.01
                 prcp_scaled              Intercept     0.00 0.01   0.00 2.000000e-02     0.00
                 snow_scaled              Intercept     0.00 0.01   0.00 2.000000e-02     0.00
                        line red_line_modernization     0.09 0.31   0.19 4.900000e-01     0.13
                     holiday              Intercept     0.05 0.22   0.14 3.300000e-01     0.06
                     holiday                   line     0.04 0.21   0.18 2.400000e-01     0.06
                    year_fac              Intercept     0.00 0.06   0.04 1.000000e-01     0.01
                         day              Intercept     0.00 0.00   0.00 4.162009e+69     0.00
                        line              Intercept     0.49 0.70   0.42 1.150000e+00     0.65
                        line                    day     0.05 0.22   0.18 2.700000e-01     0.06
           year_day:lineblue              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
          year_day:linebrown              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
          year_day:linegreen              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
         year_day:lineorange              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
           year_day:linepink              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
         year_day:linepurple              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
 year_day:linepurple_express              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
            year_day:linered              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
         year_day:lineyellow              Intercept     0.00 0.00   0.00 0.000000e+00     0.00
                    Residual                     NA     0.02 0.13   0.13 1.300000e-01     0.02</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Fixed Effects:</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>         Term Value   SE     t P_value Lower_2.5 Upper_97.5
    Intercept -0.28 0.24 -1.14    0.25     -0.76       0.20
   is_weekend -0.54 0.06 -8.27    0.00     -0.66      -0.41
 is_cubs_game  0.04 0.00 13.81    0.00      0.03       0.04
  is_sox_game  0.01 0.00  3.81    0.00      0.00       0.02</code></pre>
</div>
</div>
<p>Now we can visualize test predictions broken about by line. The greater flexibility of the GAM for fixed and other effects allows it to follow the trends more easily than the standard linear mixed model approach.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/gam-vis-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can also see improvement over our standard mixed model approach, and our best performance yet.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.140</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.087</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.981</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
</section>
<section id="prophet" class="level2">
<h2 class="anchored" data-anchor-id="prophet">Prophet</h2>
<section id="intro-4" class="level3">
<h3 class="anchored" data-anchor-id="intro-4">Intro</h3>
<p><em>Prophet</em> is an approach from Facebook that uses Stan to estimate a time series model taking various trends, seasonality, and other factors under consideration. By default, it only uses Stan for optimization (e.g.&nbsp;via ‘BFGS’), but you can switch to fully Bayesian if desired, and take advantage of all that the Bayesian approach has to offer.</p>
</section>
<section id="data-prep-2" class="level3">
<h3 class="anchored" data-anchor-id="data-prep-2">Data Prep</h3>
<p>The <span class="pack" style="">prophet</span> package in R takes some getting used to. We have to have specific names for our variables, and unfortunately have to do extra work to incorporate categorical features. We can use <span class="pack" style="">recipes</span> (like <span class="pack" style="">yardstick</span>, part of the <span class="pack" style="">tidymodels</span> ’verse) to set up the data (e.g.&nbsp;one-hot encoding).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(prophet)</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(recipes)</span>
<span id="cb25-3"></span>
<span id="cb25-4">df_train_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(date, line) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y  =</span> rides_scaled,</span>
<span id="cb25-7">         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ds =</span> date)</span>
<span id="cb25-8"></span>
<span id="cb25-9">rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> recipes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., df_train_prophet)</span>
<span id="cb25-10"></span>
<span id="cb25-11">df_train_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_dummy</span>(line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">one_hot =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_original_cols =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">training =</span> df_train_prophet) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bake</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> df_train_prophet) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_with</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'line_'</span>), str_remove, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'line_'</span>)</span>
<span id="cb25-16"></span>
<span id="cb25-17">df_validate_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(date, line)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb25-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ds =</span> date, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> rides_scaled)</span>
<span id="cb25-20"></span>
<span id="cb25-21">rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">recipe</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>., df_validate_prophet)</span>
<span id="cb25-22"></span>
<span id="cb25-23">df_validate_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> rec <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step_dummy</span>(line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">one_hot =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">keep_original_cols =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prep</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">training =</span> df_train_prophet) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bake</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">new_data =</span> df_validate_prophet) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb25-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename_with</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">starts_with</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'line_'</span>), str_remove, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'line_'</span>)</span></code></pre></div>
</div>
</section>
<section id="model-3" class="level3">
<h3 class="anchored" data-anchor-id="model-3">Model</h3>
<p>With data in place, we are ready to build the model. Note that later we will compare results to <span class="pack" style="">fable.prophet</span>, which will mask some of the functions here, or vice versa depending on which you load first. I would suggest only doing the prophet model, or only doing the fable model, rather than trying to do both at the same time, to avoid any mix-up.</p>
<p>After setting up the model, you have to add additional features in separate steps. Prophet has a nice way to incorporate holidays though. When you run this model, you may have to wait for a minute or so.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use prophet::prophet in case you have fable.prophet loaded also</span></span>
<span id="cb26-2">model_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> prophet<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prophet</span>(</span>
<span id="cb26-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">holidays =</span> generated_holidays <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'US'</span>),</span>
<span id="cb26-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yearly.seasonality =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb26-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">seasonality.mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiplicative"</span>,</span>
<span id="cb26-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">changepoint.prior.scale =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb26-7">)</span>
<span id="cb26-8"></span>
<span id="cb26-9">line_names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb26-10">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>,</span>
<span id="cb26-11">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'brown'</span>,</span>
<span id="cb26-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>,</span>
<span id="cb26-13">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>,</span>
<span id="cb26-14">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pink'</span>,</span>
<span id="cb26-15">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purple'</span>,</span>
<span id="cb26-16">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'purple_express'</span>,</span>
<span id="cb26-17">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb26-18">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span></span>
<span id="cb26-19">)</span>
<span id="cb26-20"></span>
<span id="cb26-21">predictors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb26-22">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_weekend'</span>,</span>
<span id="cb26-23">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_cubs_game'</span>,</span>
<span id="cb26-24">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_sox_game'</span>,</span>
<span id="cb26-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'is_holiday',</span></span>
<span id="cb26-26">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tmax_scaled'</span>,</span>
<span id="cb26-27">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'prcp_scaled'</span>,</span>
<span id="cb26-28">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'snow_scaled'</span>,</span>
<span id="cb26-29">  line_names</span>
<span id="cb26-30">)</span>
<span id="cb26-31"></span>
<span id="cb26-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> predictors) {</span>
<span id="cb26-33">  model_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_regressor</span>(model_prophet, i, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">standardize =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'additive'</span>)</span>
<span id="cb26-34">}</span>
<span id="cb26-35"></span>
<span id="cb26-36">model_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_country_holidays</span>(model_prophet, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">country_name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'US'</span>)</span>
<span id="cb26-37"></span>
<span id="cb26-38">fit_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit.prophet</span>(model_prophet, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df =</span> df_train_prophet)</span>
<span id="cb26-39"></span>
<span id="cb26-40">forecast <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(fit_prophet, df_validate_prophet)</span></code></pre></div>
</div>
</section>
<section id="explore-3" class="level3">
<h3 class="anchored" data-anchor-id="explore-3">Explore</h3>
<p>We now visualize predictions as we did with the GAM. But one of the nice things with <span class="pack" style="">prophet</span> is that you can plot the various parts of the model results via the <span class="func" style="">plot</span> method or <span class="func" style="">prophet_plot_components</span> (not shown). Unfortunately, our baseline effort seems to undersmooth our more popular lines (blue, red), and overreacts to some of the others (purple, yellow). This is because it’s not really changing the predictions according to line.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/prophet-vis-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We can also assess performance as before, but note that <span class="pack" style="">prophet</span> has it’s own cross-validation capabilities which would be better to utilize if this was your primary tool. Between the previous visualization and these metrics, our first stab doesn’t appear to do as well as the GAM, so you might like to go back and tweak things.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.280</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.198</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.925</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
</section>
<section id="fable" class="level2">
<h2 class="anchored" data-anchor-id="fable">Fable</h2>
<section id="intro-5" class="level3">
<h3 class="anchored" data-anchor-id="intro-5">Intro</h3>
<p>I came across <span class="pack" style="">fable.prophet</span> as a possibly easier way to engage prophet. It is an extension of <span class="pack" style="">fable</span> and related packages, which are very useful for time series processing and analysis. Note that it is 0.1.0 version development, and hasn’t had much done with it in the past year, so your mileage may vary with regard to utility by the time you read this<sup>5</sup>. But with it we can specify the model in more of an R fashion, and we now don’t have as much data pre-processing.</p>
</section>
<section id="data-prep-3" class="level3">
<h3 class="anchored" data-anchor-id="data-prep-3">Data Prep</h3>
<p>One key difference using <span class="pack" style="">fable.prophet</span> is that it works with <code>tsibble</code> objects, and thus must have unique date observations. We can do this by setting <code>line</code> as the key<sup>6</sup>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(fable.prophet)</span>
<span id="cb27-2"></span>
<span id="cb27-3">df_train_fable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_train_prophet <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tsibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> ds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> line)</span>
<span id="cb27-5"></span>
<span id="cb27-6">df_validate_fable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate_prophet <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb27-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tsibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">index =</span> ds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key =</span> line)</span>
<span id="cb27-8"></span>
<span id="cb27-9">holidays_fable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> holidays <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb27-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(country <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'US'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb27-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ds =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_date</span>(ds)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb27-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tsibble</span>()</span></code></pre></div>
</div>
</section>
<section id="model-4" class="level3">
<h3 class="anchored" data-anchor-id="model-4">Model</h3>
<p>Beyond this we use functions within our formula to set the various components. With line as the key, <span class="pack" style="">fable</span> is actually running separate prophet models for each line, and we can do so in parallel if desired.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">model_prophet <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fable.prophet<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prophet</span>(</span>
<span id="cb28-2">  y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> </span>
<span id="cb28-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">growth</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">changepoint_prior_scale =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">season</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"week"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiplicative"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">holiday</span>(holidays_fable) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xreg</span>(</span>
<span id="cb28-7">      is_weekend,</span>
<span id="cb28-8">      is_cubs_game,</span>
<span id="cb28-9">      is_sox_game,</span>
<span id="cb28-10">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is_holiday,</span></span>
<span id="cb28-11">      tmax_scaled,</span>
<span id="cb28-12">      prcp_scaled,</span>
<span id="cb28-13">      snow_scaled</span>
<span id="cb28-14">    ) </span>
<span id="cb28-15">)</span>
<span id="cb28-16"></span>
<span id="cb28-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library(future)</span></span>
<span id="cb28-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plan(multisession)</span></span>
<span id="cb28-19"></span>
<span id="cb28-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># furrr is used under the hood, and though it wants a seed, it doesn't</span></span>
<span id="cb28-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># automatically use one so will give warnings. I don't think it can be passed</span></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># via the model function, so expect to see ignorable warnings (suppressed here).</span></span>
<span id="cb28-23"></span>
<span id="cb28-24">fit_fable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">model</span>(df_train_fable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mdl =</span> model_prophet)</span>
<span id="cb28-25"></span>
<span id="cb28-26">forecast_fable <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> fit_fable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb28-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">forecast</span>(df_validate_fable) </span>
<span id="cb28-28"></span>
<span id="cb28-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plan(sequential)</span></span></code></pre></div>
</div>
</section>
<section id="explore-4" class="level3">
<h3 class="anchored" data-anchor-id="explore-4">Explore</h3>
<p>With <span class="pack" style="">fable.prophet</span> visualization, we have the more automatic plots, but again we’ll stick with the basic validation plot we’ve been doing.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">components</span>(fit_fable)</span>
<span id="cb29-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">components</span>(fit_fable) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>()</span>
<span id="cb29-4">forecast_fable <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">autoplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#ff5500'</span>)</span></code></pre></div>
</div>
<p>This model does well, and better than basic <span class="pack" style="">prophet</span>, but we can see its limitations, for example, with the yellow line, and more recent ridership in general.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/fable-model-explore-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>And we check performance as before. The <span class="pack" style="">fable</span> model is doing almost as well as our GAM approach did.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.154</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.092</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.979</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>One nice thing about the <span class="pack" style="">fable</span> approach is its internal performance metrics, which are easily obtained. It will give us results for each line<sup>7</sup>, validation data results shown. We see that we have more error for the popular lines as before, but in terms of percentage error, the other lines are showing more difficulty. You can find out more about the additional metrics available <a href="https://otexts.com/fpp3/accuracy.html">here</a>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accuracy</span>(fit_fable)</span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accuracy</span>(forecast_fable, df_validate_fable)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.model</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">line</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.type</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">ME</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">RMSE</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">MAE</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">MPE</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">MAPE</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">ACF1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">blue</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.083</td>
<td style="text-align: right;">0.251</td>
<td style="text-align: right;">0.180</td>
<td style="text-align: right;">-27.007</td>
<td style="text-align: right;">62.199</td>
<td style="text-align: right;">0.641</td>
</tr>
<tr class="even">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">brown</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.001</td>
<td style="text-align: right;">0.126</td>
<td style="text-align: right;">0.084</td>
<td style="text-align: right;">-31.034</td>
<td style="text-align: right;">88.711</td>
<td style="text-align: right;">0.621</td>
</tr>
<tr class="odd">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">green</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.088</td>
<td style="text-align: right;">0.118</td>
<td style="text-align: right;">0.100</td>
<td style="text-align: right;">-105.627</td>
<td style="text-align: right;">112.000</td>
<td style="text-align: right;">0.660</td>
</tr>
<tr class="even">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">orange</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.035</td>
<td style="text-align: right;">0.084</td>
<td style="text-align: right;">0.063</td>
<td style="text-align: right;">-43.228</td>
<td style="text-align: right;">60.244</td>
<td style="text-align: right;">0.638</td>
</tr>
<tr class="odd">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">pink</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.058</td>
<td style="text-align: right;">0.089</td>
<td style="text-align: right;">0.072</td>
<td style="text-align: right;">-18.386</td>
<td style="text-align: right;">20.452</td>
<td style="text-align: right;">0.675</td>
</tr>
<tr class="even">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">purple</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.006</td>
<td style="text-align: right;">0.012</td>
<td style="text-align: right;">0.009</td>
<td style="text-align: right;">-0.633</td>
<td style="text-align: right;">0.982</td>
<td style="text-align: right;">0.503</td>
</tr>
<tr class="odd">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">purple_express</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.049</td>
<td style="text-align: right;">0.107</td>
<td style="text-align: right;">0.083</td>
<td style="text-align: right;">-41.459</td>
<td style="text-align: right;">218.861</td>
<td style="text-align: right;">0.752</td>
</tr>
<tr class="even">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">red</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">0.045</td>
<td style="text-align: right;">0.297</td>
<td style="text-align: right;">0.211</td>
<td style="text-align: right;">-3.003</td>
<td style="text-align: right;">14.880</td>
<td style="text-align: right;">0.598</td>
</tr>
<tr class="odd">
<td style="text-align: left;">mdl</td>
<td style="text-align: left;">yellow</td>
<td style="text-align: left;">Test</td>
<td style="text-align: right;">-0.027</td>
<td style="text-align: right;">0.030</td>
<td style="text-align: right;">0.027</td>
<td style="text-align: right;">2.892</td>
<td style="text-align: right;">2.912</td>
<td style="text-align: right;">0.726</td>
</tr>
</tbody>
</table>


</div>
</div>
<p>The <span class="pack" style="">fable</span> results suggests what we already knew from our GAM and mixed model approach, that interactions of the series with line are important. We weren’t easily able to do this with the default <span class="pack" style="">prophet</span> (it would likely require adding time x line interaction regresssors), so it’s nice that we have the option here.</p>
</section>
</section>
<section id="gbm" class="level2">
<h2 class="anchored" data-anchor-id="gbm">GBM</h2>
<section id="intro-6" class="level3">
<h3 class="anchored" data-anchor-id="intro-6">Intro</h3>
<p>This part is actually new from when I first wrote up this post over a year ago. I basically wanted to test if a boosting approach would work decently out of the box without doing anything special regarding the structure of the data. I don’t add it to the summary visualizations, but provide the standard results here.</p>
</section>
<section id="data-prep-4" class="level3">
<h3 class="anchored" data-anchor-id="data-prep-4">Data Prep</h3>
<p>I’ll use <span class="pack" style="">lightgbm</span> which I’ve been increasingly using of late. It requires a matrix object for input, and so some additional processing as well.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lightgbm)</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lightgbm only accepts a matrix input</span></span>
<span id="cb31-4">df_train_lgb_init <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb31-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb31-6">    rides_scaled,</span>
<span id="cb31-7">    is_weekday,</span>
<span id="cb31-8">    is_holiday,</span>
<span id="cb31-9">    is_cubs_game,</span>
<span id="cb31-10">    is_sox_game,</span>
<span id="cb31-11">    tmax_scaled,</span>
<span id="cb31-12">    prcp_scaled,</span>
<span id="cb31-13">    line, </span>
<span id="cb31-14">    red_line_modernization,</span>
<span id="cb31-15">    year,</span>
<span id="cb31-16">    month,</span>
<span id="cb31-17">    year_day</span>
<span id="cb31-18">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb31-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb31-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(line),</span>
<span id="cb31-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(month)</span>
<span id="cb31-22">  )</span>
<span id="cb31-23"></span>
<span id="cb31-24">X_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df_train_lgb_init <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>rides_scaled))</span>
<span id="cb31-25"></span>
<span id="cb31-26">X_test  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb31-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(</span>
<span id="cb31-28">    is_weekday,</span>
<span id="cb31-29">    is_holiday,</span>
<span id="cb31-30">    is_cubs_game,</span>
<span id="cb31-31">    is_sox_game,</span>
<span id="cb31-32">    tmax_scaled,</span>
<span id="cb31-33">    prcp_scaled,</span>
<span id="cb31-34">    line, </span>
<span id="cb31-35">    red_line_modernization,</span>
<span id="cb31-36">    year,</span>
<span id="cb31-37">    month,</span>
<span id="cb31-38">    year_day</span>
<span id="cb31-39">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb31-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb31-41">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">line =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(line),</span>
<span id="cb31-42">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">month =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(month)</span>
<span id="cb31-43">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb31-44">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>()</span>
<span id="cb31-45"></span>
<span id="cb31-46"></span>
<span id="cb31-47">df_train_lgb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lgb.Dataset</span>(</span>
<span id="cb31-48">  X_train,</span>
<span id="cb31-49">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> df_train_lgb_init<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rides_scaled,</span>
<span id="cb31-50">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">categorical_feature =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb31-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_weekday'</span>,</span>
<span id="cb31-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_holiday'</span>,</span>
<span id="cb31-53">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_cubs_game'</span>,</span>
<span id="cb31-54">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_sox_game'</span>,</span>
<span id="cb31-55">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'line'</span>,</span>
<span id="cb31-56">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'year'</span>,</span>
<span id="cb31-57">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'month'</span></span>
<span id="cb31-58">  )</span>
<span id="cb31-59">)</span>
<span id="cb31-60"></span>
<span id="cb31-61">df_test_lgb  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lgb.Dataset.create.valid</span>(</span>
<span id="cb31-62">  df_train_lgb, </span>
<span id="cb31-63">  X_test,</span>
<span id="cb31-64">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> df_validate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>rides_scaled</span>
<span id="cb31-65">)</span></code></pre></div>
</div>
</section>
<section id="model-5" class="level3">
<h3 class="anchored" data-anchor-id="model-5">Model</h3>
<p>Typically we would perform some sort of search over the (many) parameters available to tweak with <span class="pack">lightgbm</span>, like the number of trees, learning rate, regularizer parameters and more. I ignore that, but I did fiddle with the learning rate and bumped up the <code>nrounds</code> (trees), but that’s it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">params <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb32-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">objective       =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regression"</span></span>
<span id="cb32-3">  , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">metric        =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l2"</span></span>
<span id="cb32-4">  , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min_data      =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>L</span>
<span id="cb32-5">  , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">learning_rate =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">01</span></span>
<span id="cb32-6">)</span>
<span id="cb32-7"></span>
<span id="cb32-8">fit_gbm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lgb.train</span>(</span>
<span id="cb32-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">params    =</span> params</span>
<span id="cb32-10">  , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data    =</span> df_train_lgb</span>
<span id="cb32-11">  , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrounds =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>L</span>
<span id="cb32-12">)</span></code></pre></div>
</div>
</section>
<section id="explore-5" class="level3">
<h3 class="anchored" data-anchor-id="explore-5">Explore</h3>
<p>Some may be surprised at how well this does, but regular users of boosting probably are not. We didn’t have to do much and it’s already the best performing model.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/gbm-vis-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.130</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.076</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.984</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
</section>
<section id="torch" class="level2">
<h2 class="anchored" data-anchor-id="torch">Torch</h2>
<p>At this point we have a collection of models that are still relatively interpretable, and mostly within our standard regression model framework. It’s good to see them able to perform very well without too much complexity. However, we still have other methods available that would be more computationally demanding, are more opaque in operations, but which would potentially provide the most accurate forecasts. For this we turn to using PyTorch, which is now available via the <span class="pack" style="">torch</span> package in R<sup>8</sup>.</p>
<p>In using <span class="pack" style="">torch</span>, we’re going to follow the <a href="https://blogs.rstudio.com/ai/posts/2021-03-19-forecasting-time-series-with-torch_4/">demo series at the RStudio AI blog</a> <sup>9</sup>. It shows in four parts how to use a <em>recurrent neural network</em>. In their example, they use a data set for a single series with (summarized) daily values, similar to our daily counts here. We will use the final model demonstrated in the series, a soi disant <em>seq2seq</em> model that includes an <em>attention</em> mechanism. More detail can be found <a href="https://www.deeplearningbook.org/contents/rnn.html">here</a>. The conceptual gist of the model can be described as taking a set of time points to predict another set of future time points, and doing so for all points in the series.</p>
<p>To be clear, they only use a single series, no other information (e.g.&nbsp;additional regressors). So we will do the same, coming full circle to what we started out with, just looking at daily ridership- a single time series for the red line.</p>
<section id="data" class="level3">
<h3 class="anchored" data-anchor-id="data">Data</h3>
<p>As usual we’ll need some data prep, both for initial training-test split creation, but also specifically for usage with Torch.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tsibble)</span>
<span id="cb33-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(torch)</span>
<span id="cb33-4"></span>
<span id="cb33-5"></span>
<span id="cb33-6">df_train_torch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(line <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(rides_scaled) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>()</span>
<span id="cb33-10"></span>
<span id="cb33-11">df_validate_torch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(line <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(rides_scaled) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>()</span>
<span id="cb33-15"></span>
<span id="cb33-16">df_test_torch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(line <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-12-24'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(rides_scaled) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb33-19">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>()</span>
<span id="cb33-20"></span>
<span id="cb33-21">train_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(df_train_torch)</span>
<span id="cb33-22">train_sd   <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sd</span>(df_train_torch)</span></code></pre></div>
</div>
</section>
<section id="torch-data" class="level3">
<h3 class="anchored" data-anchor-id="torch-data">Torch data</h3>
<p>For our data, we will use a week behind lag to predict the following week. This seems appropriate for this problem, but for any particular time series problem we’d want to probably think hard about this and/or test different settings.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">n_timesteps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we use a week instead of 14 days in original blog</span></span>
<span id="cb34-2">n_forecast  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># look ahead one week</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1">cta_dataset <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dataset</span>(</span>
<span id="cb35-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cta_dataset"</span>,</span>
<span id="cb35-3"></span>
<span id="cb35-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(x, n_timesteps, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sample_frac =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb35-5"></span>
<span id="cb35-6">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_timesteps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n_timesteps</span>
<span id="cb35-7">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">torch_tensor</span>((x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> train_mean) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> train_sd)</span>
<span id="cb35-8"></span>
<span id="cb35-9">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_timesteps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb35-10"></span>
<span id="cb35-11">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>starts <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample.int</span>(</span>
<span id="cb35-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> n,</span>
<span id="cb35-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sample_frac</span>
<span id="cb35-14">    ))</span>
<span id="cb35-15"></span>
<span id="cb35-16">  },</span>
<span id="cb35-17"></span>
<span id="cb35-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.getitem =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(i) {</span>
<span id="cb35-19"></span>
<span id="cb35-20">    start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>starts[i]</span>
<span id="cb35-21">    end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>n_timesteps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb35-22">    lag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb35-23"></span>
<span id="cb35-24">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb35-25">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end],</span>
<span id="cb35-26">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x[(start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>lag)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(end<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>lag)]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">squeeze</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb35-27">    )</span>
<span id="cb35-28"></span>
<span id="cb35-29">  },</span>
<span id="cb35-30"></span>
<span id="cb35-31">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.length =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>() {</span>
<span id="cb35-32">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>starts)</span>
<span id="cb35-33">  }</span>
<span id="cb35-34">)</span>
<span id="cb35-35"></span>
<span id="cb35-36">batch_size <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb35-37"></span>
<span id="cb35-38">train_ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cta_dataset</span>(df_train_torch, n_timesteps)</span>
<span id="cb35-39">train_dl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dataloader</span>(train_ds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">batch_size =</span> batch_size, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shuffle =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb35-40"></span>
<span id="cb35-41">valid_ds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cta_dataset</span>(df_validate_torch, n_timesteps)</span>
<span id="cb35-42">valid_dl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dataloader</span>(valid_ds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">batch_size =</span> batch_size)</span>
<span id="cb35-43"></span>
<span id="cb35-44">test_ds  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cta_dataset</span>(df_test_torch, n_timesteps)</span>
<span id="cb35-45">test_dl  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dataloader</span>(test_ds, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">batch_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
</section>
<section id="model-6" class="level3">
<h3 class="anchored" data-anchor-id="model-6">Model</h3>
<p>I leave it to the <a href="https://blogs.rstudio.com/ai/posts/2021-03-19-forecasting-time-series-with-torch_4/#attention-module">blog</a> for details, but briefly, there are four components to the model:</p>
<ul>
<li><strong>Encoder</strong>: takes input, and produces outputs and states via RNN</li>
<li><strong>Decoder</strong>: takes the last predicted value as input and current context to make a new prediction</li>
<li><strong>Seq2Seq</strong>: essentially encodes once, and calls the decoder in a loop</li>
<li><strong>Attention</strong>: allows output from the encoder at a specific time point to provide ‘context’ for the decoder</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">net <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq2seq_module</span>(</span>
<span id="cb36-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gru"</span>,</span>
<span id="cb36-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input_size     =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb36-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hidden_size    =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>,</span>
<span id="cb36-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">attention_type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiplicative"</span>,</span>
<span id="cb36-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">attention_size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb36-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_forecast     =</span> n_forecast</span>
<span id="cb36-9">  )</span>
<span id="cb36-10"></span>
<span id="cb36-11">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dataloader_make_iter</span>(train_dl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dataloader_next</span>()</span>
<span id="cb36-12"></span>
<span id="cb36-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">net</span>(b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">teacher_forcing_ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
</section>
<section id="training" class="level3">
<h3 class="anchored" data-anchor-id="training">Training</h3>
<p>With data in place, we’re ready to train the model. For the most part, not much is going on here that would be different from other deep learning situations, e.g.&nbsp;choosing an optimizer, number of epochs, etc. We’ll use mean squared error as our loss, and I create an object to store the validation loss over the epochs of training. I played around with it a bit, and you’re probably not going to see much improvement after letting it go for 100 epochs.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">optimizer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optim_adam</span>(net<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>parameters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lr =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb37-2"></span>
<span id="cb37-3">num_epochs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb37-4"></span>
<span id="cb37-5">train_batch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(b, teacher_forcing_ratio) {</span>
<span id="cb37-6"></span>
<span id="cb37-7">  optimizer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zero_grad</span>()</span>
<span id="cb37-8">  output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">net</span>(b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, teacher_forcing_ratio)</span>
<span id="cb37-9">  target <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb37-10"></span>
<span id="cb37-11">  loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nnf_mse_loss</span>(output, target[ , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(output)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])])</span>
<span id="cb37-12">  loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">backward</span>()</span>
<span id="cb37-13">  optimizer<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">step</span>()</span>
<span id="cb37-14"></span>
<span id="cb37-15">  loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">item</span>()</span>
<span id="cb37-16"></span>
<span id="cb37-17">}</span>
<span id="cb37-18"></span>
<span id="cb37-19">valid_batch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">teacher_forcing_ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb37-20"></span>
<span id="cb37-21">  output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">net</span>(b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, teacher_forcing_ratio)</span>
<span id="cb37-22">  target <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y</span>
<span id="cb37-23"></span>
<span id="cb37-24">  loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nnf_mse_loss</span>(output, target[ , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(output)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])])</span>
<span id="cb37-25"></span>
<span id="cb37-26">  loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">item</span>()</span>
<span id="cb37-27"></span>
<span id="cb37-28">}</span>
<span id="cb37-29"></span>
<span id="cb37-30"></span>
<span id="cb37-31">all_valid_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb37-32"></span>
<span id="cb37-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (epoch <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>num_epochs) {</span>
<span id="cb37-34"></span>
<span id="cb37-35">  net<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">train</span>()</span>
<span id="cb37-36">  train_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb37-37"></span>
<span id="cb37-38">  coro<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loop</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> train_dl) {</span>
<span id="cb37-39">    loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">train_batch</span>(b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">teacher_forcing_ratio =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>)</span>
<span id="cb37-40">    train_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(train_loss, loss)</span>
<span id="cb37-41">  })</span>
<span id="cb37-42"></span>
<span id="cb37-43">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Epoch %d, training: loss: %3.5f </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, epoch, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(train_loss)))</span>
<span id="cb37-44"></span>
<span id="cb37-45">  net<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb37-46">  valid_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>()</span>
<span id="cb37-47"></span>
<span id="cb37-48">  coro<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loop</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> valid_dl) {</span>
<span id="cb37-49">    loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">valid_batch</span>(b)</span>
<span id="cb37-50">    valid_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(valid_loss, loss)</span>
<span id="cb37-51">  })</span>
<span id="cb37-52">  </span>
<span id="cb37-53">  all_valid_loss <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(all_valid_loss, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(valid_loss))</span>
<span id="cb37-54"></span>
<span id="cb37-55">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sprintf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Epoch %d, validation: loss: %3.5f </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, epoch, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(valid_loss)))</span>
<span id="cb37-56">}</span></code></pre></div>
</div>
</section>
<section id="evaluations" class="level3">
<h3 class="anchored" data-anchor-id="evaluations">Evaluations</h3>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">net<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb38-2"></span>
<span id="cb38-3">test_preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(test_dl))</span>
<span id="cb38-4"></span>
<span id="cb38-5">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb38-6"></span>
<span id="cb38-7">coro<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loop</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> test_dl) {</span>
<span id="cb38-8"></span>
<span id="cb38-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb38-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb38-11"></span>
<span id="cb38-12">  output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">net</span>(b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">teacher_forcing_ratio =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb38-13">  preds <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(output)</span>
<span id="cb38-14"></span>
<span id="cb38-15">  test_preds[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> preds</span>
<span id="cb38-16">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb38-17">})</span></code></pre></div>
</div>
<p>For this visualization, we do things a little different. In our current setup, we have 7 timesteps predicting 7 day windows. We started our test set at the beginning of December so that the first prediction is January first, and then proceeds accordingly.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same as test</span></span>
<span id="cb39-2">df_eval_torch <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> df_validate <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(line <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017-12-01'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(rides_scaled, date) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb39-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tsibble</span>()</span>
<span id="cb39-6"></span>
<span id="cb39-7">test_preds_plot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(test_preds))</span>
<span id="cb39-8"></span>
<span id="cb39-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(test_preds_plot)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>  n_forecast)) {</span>
<span id="cb39-10">  test_preds_plot[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb39-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb39-12">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb39-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, n_timesteps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb39-14">        test_preds[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> train_sd <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> train_mean,</span>
<span id="cb39-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df_eval_torch) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_timesteps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n_forecast)</span>
<span id="cb39-16">      )</span>
<span id="cb39-17">    )</span>
<span id="cb39-18">}</span>
<span id="cb39-19"></span>
<span id="cb39-20">df_eval_torch_plot0 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb39-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(df_eval_torch, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bind_cols</span>(test_preds_plot))</span></code></pre></div>
</div>
<p>A visualization of the predictions makes this more clear. Each 7 day segment is making predictions for the next 7 days. The following predictions are for the last two months, with each column a set of 7 predictions for that time point.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/unnamed-chunk-9-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>So for our red line plot, we’ll just use the average prediction at each date to make it comparable to the other plots. In general it looks to be doing okay, even armed with no contextual information. Certainly better than the base ARIMA plot.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-05-time-series/index_files/figure-html/unnamed-chunk-10-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>However, we can see that there is much information lost just adhering to the series alone.</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<table class="table caption-top table-sm table-striped small" data-quarto-postprocess="true">
<thead>
<tr class="header">
<th style="text-align: left;" data-quarto-table-cell-role="th">.metric</th>
<th style="text-align: left;" data-quarto-table-cell-role="th">.estimator</th>
<th style="text-align: right;" data-quarto-table-cell-role="th">.estimate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">rmse</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.804</td>
</tr>
<tr class="even">
<td style="text-align: left;">mae</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.584</td>
</tr>
<tr class="odd">
<td style="text-align: left;">rsq</td>
<td style="text-align: left;">standard</td>
<td style="text-align: right;">0.120</td>
</tr>
</tbody>
</table>


</div>
</div>
</section>
</section>
<section id="all" class="level2">
<h2 class="anchored" data-anchor-id="all">All</h2>
<p><img src="https://m-clark.github.io/img/time-series/model-test-comparison-all-lines.svg" class="img-fluid"></p>
<p><img src="https://m-clark.github.io/img/time-series/model-test-comparison-red-line.svg" class="img-fluid"></p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ul>
<li>ARIMA: no real reason to still be doing such a simplified model</li>
<li>Mixed Model: may be just what you need, but may lack in other settings</li>
<li>GAM: great, more viable than some might suspect, easy implementation</li>
<li>Prophet/Fable: Prophet needs notable work out of the box, though Fable saves you some of that work, and did great in this situation via by-group models</li>
<li>GBM: can it really be this easy?</li>
<li>Torch: pretty good even with minimal information</li>
</ul>
<p>To get some information on what Torch would do at the next level, i.e.&nbsp;adding additional features and other considerations, see <a href="https://www.strong.io/blog/forecasting-public-transport-utilization-in-chicago">Cody’s post</a>.</p>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-Hyndman2021" class="csl-entry">
Hyndman, R. J., and G. Athanasopoulos. 2021. <em>Forecasting: Principles and Practice</em>. 3rd ed. <a href="https://OTexts.com/fpp3">https://OTexts.com/fpp3</a>.
</div>
<div id="ref-west2022" class="csl-entry">
West, Brady T, Kathleen B Welch, and Andrzej T Galecki. 2022. <em>Linear Mixed Models: A Practical Guide Using Statistical Software</em>. Crc Press.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>There is also the Purple express line, which is very irregular compared to the others.↩︎</p></li>
<li id="fn2"><p>Technically we should scale the test set using the mean/sd of the training set, and though with very large data this should not matter, for time series it’s a particular concern as data can ‘shift’ over time.↩︎</p></li>
<li id="fn3"><p>This follows <a href="https://cran.r-project.org/web/packages/glmmTMB/vignettes/covstruct.html">Bolker’s demo</a>.↩︎</p></li>
<li id="fn4"><p>I always appreciated the depiction of this topic in <span class="citation" data-cites="west2022">West, Welch, and Galecki (2022)</span> quite a bit.↩︎</p></li>
<li id="fn5"><p>A year plus later after that statement, it still hasn’t gone beyond 0.1.0, so I don’t think this will continue to be useful for very long. Unfortunate, but honestly, it’s not clear <span class="pack" style="">prophet&lt;/span itself can do much better than many other tools.↩︎</span></p></li>
<li id="fn6"><p><span class="pack" style="">fable.prophet</span> may have a bug enabling the holidays functionality with parallel, so you can just use the original holiday column if you do so (single core doesn’t take too long).↩︎</p></li>
<li id="fn7"><p>We can also do this with our previous method with a split-by-apply approach. You would obtain the same results, so this serves as a nice supplement to our ‘overall’ metrics.↩︎</p></li>
<li id="fn8"><p>For the basics of using PyTorch via R, including installation, see <a href="https://blogs.rstudio.com/ai/posts/2020-09-29-introducing-torch-for-r/">the RStudio</a> post.↩︎</p></li>
<li id="fn9"><p>The blog code actually has several issues, but the <a href="https://github.com/mlverse/torchbook_materials/blob/master/scripts/rnn_attention.R">github repo</a> should work fine and is what is followed for this demo.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{clark2022,
  author = {Clark, Michael},
  title = {Exploring {Time}},
  date = {2022-08-10},
  url = {https://m-clark.github.io/posts/2021-05-time-series/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-clark2022" class="csl-entry quarto-appendix-citeas">
Clark, Michael. 2022. <span>“Exploring Time.”</span> August 10, 2022. <a href="https://m-clark.github.io/posts/2021-05-time-series/">https://m-clark.github.io/posts/2021-05-time-series/</a>.
</div></div></section></div> ]]></description>
  <category>mixed models</category>
  <category>GAM</category>
  <category>boosting</category>
  <category>time series</category>
  <category>deep learning</category>
  <guid>https://m-clark.github.io/posts/2021-05-time-series/</guid>
  <pubDate>Wed, 10 Aug 2022 04:00:00 GMT</pubDate>
  <media:content url="https://m-clark.github.io/img/time-series/dalle_mini_time_series_seasonal_effect.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Deep Learning for Tabular Data</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In a previous post, I offered <a href="../2021-07-15-dl-for-tabular/">a summary of several articles</a> that came out over the summer of 2021 regarding the application of deep learning (DL) methods to tabular data. DL has shown astounding success in the natural language processing, computer vision, and other fields, but when it comes to the sorts of data common in other situations, especially where data is usually smaller and of mixed source and type (e.g.&nbsp;demographic, social science, biological data), results were mostly unimpressive for complex DL architectures. In particular, it did not appear that DL methods could consistently compete with, much less consistently beat, common machine learning (ML) approaches such as gradient boosting (e.g.&nbsp;XGBoost). Here I provide a bit of an update, as another few articles have come along continuing the fight.</p>
</section>
<section id="tldr-the-meta-analysis" class="level2">
<h2 class="anchored" data-anchor-id="tldr-the-meta-analysis">TLDR: the meta-analysis</h2>
<p>I collected most of the results from the summarized articles here and those covered in the previous post to see if we come to any general conclusions about which methods are best or work best in certain settings. In the following tables, I excluded those I knew to be image data, as well as datasets where I thought results were indistinguishable across all models tested (e.g.&nbsp;less than 1% difference in accuracy). This left comparisons for 92 datasets across six articles. However, it’s important to note that these were not independent datasets or studies. For example, Gorishniy et al.&nbsp;are the source of two papers and essentially the same testing situations, and other datasets were common across papers (e.g.&nbsp;Higgs Boson). In the rare situations there was a tie, I gave the nod to boosting methods as a. the whole point is to do better than those, b. they are the easier model to implement, and c.&nbsp;they are not always given the same advantages in these studies (e.g.&nbsp;pre-processing).</p>
<section id="feature-type" class="level5">
<h5 class="anchored" data-anchor-id="feature-type">Feature Type</h5>
<p>The following shows results by feature type.</p>
<ul>
<li><em>Heterogeneous</em>: at least 10% of categorical or numeric data with the rest of the other</li>
<li><em>Minimal combo</em>: means any feature inclusion of a different type. In the second table I collapse to ‘any heterogeneous’.</li>
<li><em>Boost</em>: Any boosting method (most of the time it’s XGBoost but could include lightGBM or other variant)</li>
<li><em>MLP</em>: multilayer perceptron or some variant</li>
<li><em>DL_complex</em>: A DL method more complex than MLP and which is typically the focus of the paper</li>
</ul>
<p>The results suggest that current DL approaches’ strength is mostly with purely numeric data, and for heterogeneous data, simpler MLP or Boosting will generally prevail. I initially thought that boosting would do even better with heterogeneous data, and I still suspect that with more heterogeneous data and on more equal footing, results would tilt even more.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-feature-type" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-feature-type-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;1: Feature Type
</figcaption>
<div aria-describedby="tbl-feature-type-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<div id="wyjwtoybok" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
  
  
<table class="gt_table do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false" data-bgcolor="#FFFFFF">
<thead style="border-style: none;">
<tr class="gt_col_headings header" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: none; border-bottom-width: 1px; border-bottom-color: #334422; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3;">
<th id="winner_model_type" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="text-align: left; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">winner_model_type</th>
<th id="All Cat" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">All Cat</th>
<th id="All Num" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">All Num</th>
<th id="Heterogeneous" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">Heterogeneous</th>
<th id="Min. Combo" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">Min. Combo</th>
</tr>
</thead>
<tbody class="gt_table_body" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #FFFFFF;">
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">Boost</td>
<td class="gt_row gt_right" headers="All Cat" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">2</td>
<td class="gt_row gt_right" headers="All Num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">10</td>
<td class="gt_row gt_right" headers="Heterogeneous" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">14</td>
<td class="gt_row gt_right" headers="Min. Combo" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">6</td>
</tr>
<tr class="even" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">MLP</td>
<td class="gt_row gt_right" headers="All Cat" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">2</td>
<td class="gt_row gt_right" headers="All Num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">4</td>
<td class="gt_row gt_right" headers="Heterogeneous" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">9</td>
<td class="gt_row gt_right" headers="Min. Combo" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">11</td>
</tr>
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">DL_complex</td>
<td class="gt_row gt_right" headers="All Cat" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">0</td>
<td class="gt_row gt_right" headers="All Num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">22</td>
<td class="gt_row gt_right" headers="Heterogeneous" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">7</td>
<td class="gt_row gt_right" headers="Min. Combo" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">5</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output-display">
<div id="sonptfdbgd" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
  
  
<table class="gt_table do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false" data-bgcolor="#FFFFFF">
<thead style="border-style: none;">
<tr class="gt_col_headings header" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: none; border-bottom-width: 1px; border-bottom-color: #334422; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3;">
<th id="winner_model_type" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="text-align: left; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">winner_model_type</th>
<th id="All Cat" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">All Cat</th>
<th id="All Num" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">All Num</th>
<th id="Any Combo" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">Any Combo</th>
</tr>
</thead>
<tbody class="gt_table_body" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #FFFFFF;">
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">Boost</td>
<td class="gt_row gt_right" headers="All Cat" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">2</td>
<td class="gt_row gt_right" headers="All Num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">10</td>
<td class="gt_row gt_right" headers="Any Combo" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">20</td>
</tr>
<tr class="even" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">MLP</td>
<td class="gt_row gt_right" headers="All Cat" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">2</td>
<td class="gt_row gt_right" headers="All Num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">4</td>
<td class="gt_row gt_right" headers="Any Combo" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">20</td>
</tr>
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">DL_complex</td>
<td class="gt_row gt_right" headers="All Cat" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">0</td>
<td class="gt_row gt_right" headers="All Num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">22</td>
<td class="gt_row gt_right" headers="Any Combo" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">12</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</figure>
</div>
</div>
</section>
<section id="samplefeature-set-size" class="level5">
<h5 class="anchored" data-anchor-id="samplefeature-set-size">Sample/Feature Set Size</h5>
<p>The following suggests that complex DL methods are going to require a lot of data to perform better. This isn’t that surprising but the difference here is quite dramatic. Interestingly, MLP methods worked well for fewer features. N total in this case means total size reported (not just training).</p>
<div class="cell" data-layout-align="center">
<div id="tbl-feature-size" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-feature-size-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;2: Sample Size
</figcaption>
<div aria-describedby="tbl-feature-size-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<div id="kfoppiraiy" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
  
  
<table class="gt_table do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false" data-bgcolor="#FFFFFF">
<thead style="border-style: none;">
<tr class="gt_col_headings header" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: none; border-bottom-width: 1px; border-bottom-color: #334422; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3;">
<th id="winner_model_type" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="text-align: left; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">winner_model_type</th>
<th id="N features" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">N features</th>
<th id="N total" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">N total</th>
</tr>
</thead>
<tbody class="gt_table_body" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #FFFFFF;">
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">Boost</td>
<td class="gt_row gt_right" headers="N features" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">209</td>
<td class="gt_row gt_right" headers="N total" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">133,309</td>
</tr>
<tr class="even" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">DL_complex</td>
<td class="gt_row gt_right" headers="N features" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">207</td>
<td class="gt_row gt_right" headers="N total" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">530,976</td>
</tr>
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">MLP</td>
<td class="gt_row gt_right" headers="N features" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">114</td>
<td class="gt_row gt_right" headers="N total" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">114,164</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</figure>
</div>
</div>
</section>
<section id="target-type" class="level5">
<h5 class="anchored" data-anchor-id="target-type">Target Type</h5>
<p>In the following we compare binary (bin), multiclass (mc), and numeric (num) target results<sup>1</sup>, but there’s no strong conclusion for this. The main thing to glean from this is that these papers do not test numeric targets nearly enough. Across dozens of disciplines and countless datasets that I’ve come across in various settings, if anything, this ratio should be reversed.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-target" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-target-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;3: Target Type
</figcaption>
<div aria-describedby="tbl-target-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<div id="owdiwpomyb" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
  
  
<table class="gt_table do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false" data-bgcolor="#FFFFFF">
<thead style="border-style: none;">
<tr class="gt_col_headings header" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: none; border-bottom-width: 1px; border-bottom-color: #334422; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3;">
<th id="winner_model_type" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="text-align: left; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">winner_model_type</th>
<th id="bin" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">bin</th>
<th id="mc" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">mc</th>
<th id="num" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">num</th>
</tr>
</thead>
<tbody class="gt_table_body" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #FFFFFF;">
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">Boost</td>
<td class="gt_row gt_right" headers="bin" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">17</td>
<td class="gt_row gt_right" headers="mc" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">10</td>
<td class="gt_row gt_right" headers="num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">5</td>
</tr>
<tr class="even" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">DL_complex</td>
<td class="gt_row gt_right" headers="bin" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">17</td>
<td class="gt_row gt_right" headers="mc" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">11</td>
<td class="gt_row gt_right" headers="num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">6</td>
</tr>
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">MLP</td>
<td class="gt_row gt_right" headers="bin" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">10</td>
<td class="gt_row gt_right" headers="mc" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">14</td>
<td class="gt_row gt_right" headers="num" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">2</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</figure>
</div>
</div>
</section>
<section id="combinations" class="level5">
<h5 class="anchored" data-anchor-id="combinations">Combinations</h5>
<p>In the following I look at any heterogeneous, smaller data (N &lt; 200,000). A complex DL model will likely not do great in this setting.</p>
<div class="cell" data-layout-align="center">
<div id="tbl-combo" class="cell quarto-float quarto-figure quarto-figure-center anchored" data-layout-align="center">
<figure class="quarto-float quarto-float-tbl figure">
<figcaption class="quarto-float-caption-top quarto-float-caption quarto-float-tbl" id="tbl-combo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Table&nbsp;4: Combinations
</figcaption>
<div aria-describedby="tbl-combo-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="cell-output-display">
<div id="ygctjnvvxs" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
  
  
<table class="gt_table do-not-create-environment cell caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false" data-bgcolor="#FFFFFF">
<thead style="border-style: none;">
<tr class="gt_col_headings header" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: none; border-bottom-width: 1px; border-bottom-color: #334422; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3;">
<th id="winner_model_type" class="gt_col_heading gt_columns_bottom_border gt_left" data-quarto-table-cell-role="th" style="text-align: left; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">winner_model_type</th>
<th id="n" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="text-align: right; border-style: none; background-color: #FFFFFF; font-size: 12px; font-weight: normal; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; font-variant-numeric: tabular-nums; color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase;" scope="col" data-bgcolor="#FFFFFF" data-valign="bottom">n</th>
</tr>
</thead>
<tbody class="gt_table_body" style="border-style: none; border-top-style: none; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #FFFFFF;">
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">Boost</td>
<td class="gt_row gt_right" headers="n" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">19</td>
</tr>
<tr class="even" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">DL_complex</td>
<td class="gt_row gt_right" headers="n" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">8</td>
</tr>
<tr class="odd" style="border-style: none;">
<td class="gt_row gt_left" headers="winner_model_type" style="text-align: left; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">MLP</td>
<td class="gt_row gt_right" headers="n" style="text-align: right; border-style: none; padding-top: 7px; padding-bottom: 7px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; font-variant-numeric: tabular-nums; font-family: 'Source Sans Pro'; font-weight: 400;" data-valign="middle">19</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</figure>
</div>
</div>
<p>Now, on to the details of some of the recent results that were included.</p>
</section>
</section>
<section id="on-embeddings-for-numerical-features-in-tabular-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="on-embeddings-for-numerical-features-in-tabular-deep-learning">On Embeddings for Numerical Features in Tabular Deep Learning</h2>
<ul>
<li><em>Authors</em>: Gorishniy, Rubachev, &amp; Babenko</li>
<li><em>Year</em>: 2022</li>
<li><a href="https://arxiv.org/abs/2203.05556">Arxiv Link</a></li>
</ul>
<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p><span class="citation" data-cites="gorishniy2022embeddings">Yura Gorishniy, Rubachev, and Babenko (2022)</span> pit several architectures against one another, such as standard multilayer perceptron (MLP), ResNet, and their own transformer approach (see <span class="citation" data-cites="gorishniy2021tabular">Yuri Gorishniy et al. (2021)</span>). Their previous work, which was summarized in my earlier post, was focused on the architecture, while here they focus on <em>embedding</em> approaches. The primary idea is to take the value of some feature and expand it to some embedding space, then use the embedding in lieu of the raw feature. It can essentially be seen as a pre-processing task.</p>
<p>One approach they use is <em>piecewise linear encoding</em> (PLE), which they at one point describe as ‘a continuous alternative to the one-hot encoding’<sup>2</sup>. Another embedding they use is basically a fourier transform.</p>
</section>
<section id="data" class="level3">
<h3 class="anchored" data-anchor-id="data">Data</h3>
<ul>
<li>12 public datasets mostly from previous works on tabular DL and Kaggle competitions.</li>
<li>Sizes were from ~10K to &gt;1M.</li>
<li>Target variables were binary, multiclass, or numeric.</li>
<li>The number of features ranged from 8 to 200.<br>
</li>
<li>9 of 12 data sets had only numeric features, two had a single categorical feature, and unfortunately, only one of these might be called truly <em>heterogeneous</em>, i.e., with a notable mix of categorical and numeric features<sup>3</sup>.</li>
</ul>
</section>
<section id="models-explored" class="level3">
<h3 class="anchored" data-anchor-id="models-explored">Models Explored</h3>
<ul>
<li><em>CatBoost</em></li>
<li><em>XGBoost</em></li>
<li><em>MLP</em>, <em>MLP*</em></li>
<li><em>ResNet</em>, <em>ResNet*</em></li>
<li><em>Transformer*</em></li>
</ul>
<p>* Using proposed embeddings</p>
</section>
<section id="quick-summary" class="level3">
<h3 class="anchored" data-anchor-id="quick-summary">Quick Summary</h3>
<ul>
<li>A mix of results with no clear/obvious winners (results are less distinguishable if one keeps to the actual precision of the performance metrics, and even less so if talking about statistical differences in performance).
<ul>
<li>Several datasets showed no practical difference across any model (e.g.&nbsp;all accuracy results within ~.01 of each other).</li>
</ul></li>
<li>Embedding-based approaches generally tend to improve over their non-embedding counter parts (e.g.&nbsp;MLP + embedding &gt; MLP), this was possibly the clearest result of the paper.</li>
<li>I’m not sure we could say the same for ResNet, where results were similar with or without embedding</li>
<li>XGBoost was best on the one truly heterogeneous dataset.</li>
</ul>
<!-- see code/dl_for_tabular/tbl_processing.rmd -->
<!-- ![Results Table](../../img/dl-for-tab/primary_results.png)  -->
<p>In general this was an interesting paper, and I liked the simple embedding approaches used. It was nice to see that they may be useful in some contexts. The fourier transform is something that analysts (including our team at <a href="https://strong.io">Strong</a>) have used in boosting, so I’m a bit curious why they don’t do Boosting + embeddings for comparison for that or both embedding types. These embeddings can be seen as a pre-processing step, so nothing would keep someone from using them for any model.</p>
<p>Another interesting aspect was how little difference there was in model performance. It seemed half the datasets showed extremely small differences between any model type.</p>
</section>
</section>
<section id="saint-improved-neural-networks-for-tabular-data-via-row-attention-and-contrastive-pre-training" class="level2">
<h2 class="anchored" data-anchor-id="saint-improved-neural-networks-for-tabular-data-via-row-attention-and-contrastive-pre-training">SAINT: Improved neural networks for tabular data via row attention and contrastive pre-training</h2>
<ul>
<li><em>Authors</em>: Somepalli, Goldblum, Schwarzschild, Bayan-Bruss, &amp; Goldstein</li>
<li><em>Year</em>: 2021</li>
<li><a href="https://arxiv.org/abs/2106.01342">Arxiv Link</a></li>
</ul>
<section id="overview-1" class="level3">
<h3 class="anchored" data-anchor-id="overview-1">Overview</h3>
<p>This paper applies BERT-style attention over rows and columns, along with embedding/data augmentation. They distinguish the standard attention over features, with intersample attention of rows. In addition, they use <em>CutMix</em> for data augmentation (originally devised for images), which basically combines pairs of observations to create a new observation<sup>4</sup>. Their model is called <em>SAINT</em>, the Self-Attention and Intersample Attention Transformer.</p>
</section>
<section id="data-1" class="level3">
<h3 class="anchored" data-anchor-id="data-1">Data</h3>
<ul>
<li>16 data sets</li>
<li>All classification, 2 multiclass</li>
<li>6 are heterogeneous, 2 notably so</li>
<li>Sizes 200 to almost 500K</li>
</ul>
</section>
<section id="models-explored-1" class="level3">
<h3 class="anchored" data-anchor-id="models-explored-1">Models Explored</h3>
<ul>
<li>Logistic Regression (!)</li>
<li>Random Forest</li>
<li>Boosting
<ul>
<li>CatBoost</li>
<li>XGBoost</li>
<li>LightGBM</li>
</ul></li>
<li>MLP</li>
<li>TabNet</li>
<li>VIME</li>
<li>TabTransformer</li>
<li>SAINT</li>
</ul>
</section>
<section id="quick-summary-1" class="level3">
<h3 class="anchored" data-anchor-id="quick-summary-1">Quick Summary</h3>
<ul>
<li><p>It seems the SAINT does quite well on some of the data, and average AUROC across all datasets is higher than XGB.</p></li>
<li><p>Main table shows only 9 datasets though, which they call ‘representative’ but it’s not clear what that means when you only have 16 to start. One dataset showed near perfect classification for all models so will not be considered. Of the 15 total remaining:</p>
<ul>
<li>SAINT wins 10 (including 3 heterogeneous)</li>
<li>Boosting wins 5 (including 2 heterogeneous)</li>
</ul></li>
<li><p>SAINT benefits from <em>data augmentation</em>. This could have been applied to any of the other models, but doesn’t appear to have been done.</p></li>
<li><p>At least they also used some form of logistic regression as a baseline, though I couldn’t find details on its implementation (e.g.&nbsp;regularization, including interactions). I don’t think this sort of simple baseline is utilized enough.</p></li>
</ul>
<p>This is an interesting result, but somewhat dampened by lack of including numeric targets and more heterogeneous data. The authors include small data settings which is great, and are careful to not generalize despite some good results, which I can appreciate.</p>
<p>I really like the fact they also compare a simple logistic regression to these models, because if you’re not able to perform notably better relative to the simplest model one could do, then why would we care? The fact that logistic regression is at times competitive and even beats boosting/SAINT methods occasionally gives me pause though. Perhaps some of these data are not sufficiently complex to be useful in distinguishing these methods? It is realistic though. While it’s best not to assume as such, sometimes a linear model is appropriate given the features and target at hand.</p>
</section>
</section>
<section id="self-attention-between-datapoints-going-beyond-individual-input-output-pairs-in-deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="self-attention-between-datapoints-going-beyond-individual-input-output-pairs-in-deep-learning">Self-Attention Between Datapoints: Going Beyond Individual Input-Output Pairs in Deep Learning</h2>
<ul>
<li><em>Authors</em>: Kossen, Band, Lyle, Gomez, Rainforth, &amp; Gal</li>
<li><em>Year</em>: 2021</li>
<li><a href="https://arxiv.org/abs/2106.02584">Arxiv Link</a></li>
</ul>
<section id="overview-2" class="level3">
<h3 class="anchored" data-anchor-id="overview-2">Overview</h3>
<p>This paper introduces <em>Non-Parametric Transformers</em>, which focus on holistic processing of multiple inputs, and attempts to consider an entire dataset as input as opposed to a single row. Their model attempts to learn relations between data points to aid prediction. They use a mask to identify prediction points from the non-masked data, i.e.&nbsp;the entire <img src="https://latex.codecogs.com/png.latex?X_%7B%5Ctextrm%7Bnot%20masked%7D%7D%5Ctext%7B%20%7D"> data used to predict <img src="https://latex.codecogs.com/png.latex?X_%7B%5Ctextrm%7Bmasked%7D%7D%5Ctext%7B%20%7D">. The X matrix actually includes the target (also masked vs.&nbsp;not). At prediction, the model is able to make use of the correlations of inputs of training to ultimately make a prediction.</p>
</section>
<section id="data-2" class="level3">
<h3 class="anchored" data-anchor-id="data-2">Data</h3>
<ul>
<li>10 datasets from UCI, 2 are image (CIFAR MNIST)</li>
<li>4 binary, 2 multiclass, 4 numeric targets</li>
</ul>
</section>
<section id="models-explored-2" class="level3">
<h3 class="anchored" data-anchor-id="models-explored-2">Models Explored</h3>
<ul>
<li>NPT</li>
<li>Boosting
<ul>
<li>GB</li>
<li>XGB</li>
<li>CatBoost</li>
<li>LightGBM</li>
</ul></li>
<li>Random Forest</li>
<li>TabNet</li>
<li>Knn</li>
</ul>
</section>
<section id="quick-summary-2" class="level3">
<h3 class="anchored" data-anchor-id="quick-summary-2">Quick Summary</h3>
<ul>
<li>Good performance of these models, but not too different from best boosting model for any type of data.
<ul>
<li>NPT best on binary classification, but similar to CatBoost</li>
<li>Same as XGB and similar to MLP on multiclass</li>
<li>Boosting slightly better on numeric targets, but NPT similar</li>
</ul></li>
<li>As seen several times now, TabNet continues to underperform</li>
<li>k-nn regression worst (not surprising)</li>
</ul>
<p>When I first read the abstract where they say “We challenge a common assumption underlying most supervised deep learning: that a model makes a prediction depending only on its parameters and the features of a single input.”, I immediately was like ‘What about this, that, and those?’. The key phrase was ‘deep learning’, because the authors note later that this has a very long history in the statistical modeling realm. I was glad to see in their background of the research that they explicitly noted the models that came to my mind, like gaussian processes, kernel regression, etc. Beyond that, many are familiar with techniques like knn-regression and predictive mean matching, so it’s definitely not new to consider more than a single data point for prediction. I thought it was good of them to add k-nn regression to the model mix, even though it was not going to do well compared to the other approaches.</p>
<p>Though the author’s acknowledge a clear thread/history here, I’m not sure this result is the fundamental shift they claim, versus a further extension/expansion into the DL domain. Even techniques that may work on a single input at a time may ultimately be taking advantage of correlations among the inputs (e.g.&nbsp;spatial correlations in images). Also, automatic learning of feature interactions is standard even in basic regularized regression settings, but here their focus is on observation interactions (but see k-nn regression).</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In the two reviews on DL for tabular data that I’ve done, it appears there is more work in store for DL methods applied to tabular data. While it’d be nice to have any technique that would substantially improve prediction for such settings, I do have a suspicion results are likely rosier than they are, since that is just about the case for any newly touted technique, and at least in some cases, I don’t think we’re even making apple to apple comparisons.</p>
<p>That said, I do feel like some ground has been made for DL applications for tabular data, in that architectures can now more consistently performing as well as boosting methods in certain settings, especially if we include MLP. In the end though, results don’t appear strong enough to warrant a switch from boosting for truly heterogeneous data, or even tabular data in general. I feel like someday we’ll maybe have a breakthrough, but in the meantime, we can just agree that messy data is hard stuff to model, and the best tool is whichever one works for your specific situation.</p>
</section>
<section id="guidelines-for-future-research" class="level2">
<h2 class="anchored" data-anchor-id="guidelines-for-future-research">Guidelines for future research</h2>
<p>I was thinking about what would be a convincing result, the type of setting and setup where if a DL technique was consistently performing statistically better than boosting methods, I’d be impressed. So I’ve made a list of things I’d like to see more of, and which would make for a better story if the DL method were to beat out other techniques.</p>
<ul>
<li><p>Always use heterogeneous data. For giggles let’s say 20%+ of the minority feature type.</p></li>
<li><p>Features should at least be minimally correlated, if not notably so.</p></li>
<li><p>Image data results are not interesting (why would we use boosting on this in practice?).</p></li>
<li><p>Numeric targets should at least be as much of focus as categorical targets.</p></li>
<li><p>Include ‘small’ datasets.</p></li>
<li><p>Include very structured data (e.g.&nbsp;clustered with repeated observations, geographical points, time series).</p></li>
<li><p>Use a flexible generalized additive or similar penalized regression with interactions as a baseline statistical model.</p></li>
<li><p>Maybe add survival targets to the mix.</p></li>
<li><p>If using a pre-processing step that is done outside of modeling, this likely should be applied to non-DL methods for better comparison, especially, if we’re only considering predictive accuracy and don’t care too much about interpretation.</p></li>
<li><p>Note your model variants <strong>before</strong> analyzing any data. Tweaking/torturing model architecture after results don’t pan out is akin to p-hacking in the statistical realm, and likewise wastes both researcher and reader’s time.</p></li>
<li><p>Regarding results…</p>
<ul>
<li>Don’t claim differences that you don’t have precision to do so, or at least back them up with an actual statistical test.</li>
<li>If margin of error in the metrics is overlapping, while statistically they could be different, practically they probably aren’t to most readers. Don’t make a big deal about it.</li>
<li>It is unlikely anyone will be interested in three decimal place differences for rmse/acc type metrics, and statistically, results often don’t even support two decimal precision.</li>
<li>Report how you are obtaining uncertainty in any error estimates.</li>
<li>If straightforward, try to give an estimate of total tuning/run times.</li>
</ul></li>
<li><p>With the datasets</p>
<ul>
<li>Name datasets exactly how they are named at the source you obtained them from, provide direct links</li>
<li>Provide a breakdown for both feature and target types</li>
<li>Provide clear delineation of total/training/validation/test sizes</li>
</ul></li>
</ul>



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-gorishniy2022embeddings" class="csl-entry">
Gorishniy, Yura, Ivan Rubachev, and Artem Babenko. 2022. <span>“On Embeddings for Numerical Features in Tabular Deep Learning.”</span> <em>arXiv Preprint arXiv:2203.05556</em>.
</div>
<div id="ref-gorishniy2021tabular" class="csl-entry">
Gorishniy, Yuri, Ivan Rubachev, Valentin Khrulkov, and Artem Babenko. 2021. <span>“Revisiting Deep Learning Models for Tabular Data.”</span> <em>arXiv Preprint arXiv:2106.11959</em>.
</div>
<div id="ref-kadra2021tabular" class="csl-entry">
Kadra, Arlind, Marius Lindauer, Frank Hutter, and Josif Grabocka. 2021. <span>“Regularization Is All You Need: Simple Neural Nets Can Excel on Tabular Data.”</span> <em>arXiv Preprint arXiv:2106.11189</em>.
</div>
<div id="ref-shwartz2021tabular" class="csl-entry">
Shwartz-Ziv, Ravid, and Amitai Armon. 2021. <span>“Tabular Data: Deep Learning Is Not All You Need.”</span> <em>arXiv Preprint arXiv:2106.03253</em>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I don’t refer to numeric targets as ‘regression’ because that’s silly for so many reasons. 😄↩︎</p></li>
<li id="fn2"><p>A quick look suggests it’s not too dissimilar from a <a href="https://en.wikipedia.org/wiki/B-spline#Definition">b-spline</a>.↩︎</p></li>
<li id="fn3"><p>I’ll let you go ahead and make your own prediction about which method was best on that data set.↩︎</p></li>
<li id="fn4"><p>It’s not clear to me how well this CutUp approach would actually preserve feature correlations. My gut tells me the feature correlations of this approach would be reduced relative to the observed, since the variability of the new observations is likely reduced. This ultimately may not matter for predictive purposes or their ultimate use in embeddings. However, I wonder if something like SMOTE, random (bootstrap) sampling, other DL methods like autoencoders, or similar approaches might do the same or better.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{clark2022,
  author = {Clark, Michael},
  title = {Deep {Learning} for {Tabular} {Data}},
  date = {2022-05-01},
  url = {https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-clark2022" class="csl-entry quarto-appendix-citeas">
Clark, Michael. 2022. <span>“Deep Learning for Tabular Data.”</span> May
1, 2022. <a href="https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/">https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/</a>.
</div></div></section></div> ]]></description>
  <category>deep learning</category>
  <category>machine learning</category>
  <guid>https://m-clark.github.io/posts/2022-04-01-more-dl-for-tabular/</guid>
  <pubDate>Sun, 01 May 2022 04:00:00 GMT</pubDate>
  <media:content url="https://m-clark.github.io/img/nnet.png" medium="image" type="image/png" height="120" width="144"/>
</item>
<item>
  <title>Double Descent</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2021-10-30-double-descent/</link>
  <description><![CDATA[ 





<p>A co-worker passed along a recent article <span class="citation" data-cites="dar2021farewell">(Dar, Muthukumar, and Baraniuk 2021)</span> on the topic of <em>double descent</em> in machine learning. I figured I’d summarize some key points I came across while perusing it and some referenced articles. In addition, I’ll provide an accessible example demonstrating the phenomenon.</p>
<section id="what-is-double-descent" class="level2">
<h2 class="anchored" data-anchor-id="what-is-double-descent">What is double descent?</h2>
<section id="bias-variance-trade-off" class="level3">
<h3 class="anchored" data-anchor-id="bias-variance-trade-off">Bias-variance trade-off</h3>
<p>To understand double descent you have to revisit the concept of the <em>bias-variance trade-off</em>. Without going into too much detail, the main idea with it is that having an overly complex model leads to <em>overfitting</em> the training data, which results in worse prediction on new data, at least relative to what simpler models would have done. The classic figure looks like the following, where blue is the <em>training error</em> and the red is the <em>test error</em>. Thin lines represent one path of complexity (e.g.&nbsp;across a random sample of the data), while the thicker lines are the average at a particular point of model complexity.</p>
<p><img src="https://m-clark.github.io/img/double-descent/biasvar2.svg" class="img-fluid"></p>
<p>If we don’t have a sufficiently complex model, both training and test error will be poor, the case of <em>underfitting</em>. Our model is a poor approximation of the true underlying function, and predicts poorly on data both seen and unseen. When we have too much model complexity relative to the size of our data (e.g.&nbsp;more covariates, nonlinear effects, interactions, etc.), we pass into the overfit situation. Essentially, while our model function would result in a decrease in error with the data it’s trained on (lower bias as it better approximates the true underlying function), with too much complexity, you’d also eventually have notable changes in prediction (high variance) with any slight deviation in the underlying training data. We can even get to the point where we fit the training data perfectly, but it will be overly susceptible to the noise in the data, and not do well with unseen observations.</p>
<p>To combat this, we usually attempt to find a balance between overly simple and overly complex models. This would be the point where test error is among its lowest point for a desirable level of complexity (e.g.&nbsp;around 20-25 df in the figure above), before it begins to rise again. This may be accomplished more explicitly, for example, picking a model through cross-validation, or more implicitly, for example, through regularization (<span class="citation" data-cites="belkin2019reconciling">Belkin et al. (2019)</span>). For more detail on the bias-variance trade-off, you can look at the exposition in the main article noted above, <a href="https://m-clark.github.io/introduction-to-machine-learning/concepts.html#bias-variance-tradeoff">my document here</a>, or any number of places, as it is an extremely well-known idea in machine learning.</p>
</section>
<section id="double-descent" class="level3">
<h3 class="anchored" data-anchor-id="double-descent">Double Descent</h3>
<p>The funny thing is, it turns out that the above actually only applies to a specific scenario, one which we will call <em>underparameterized</em> models. We can simplify this notion by just thinking of the case where the number of our parameters to estimate is less than or equal to the number of observations we have to work with. Nowadays though, it’s not uncommon to have what we’d call <em>overparameterized</em> models, such as random forests and neural networks, sometimes with even billions of parameters, far exceeding the data size. In this scenario, when we revisit the trade-off, something unusual happens!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/img/double-descent/double_descent_concept.png" class="img-fluid figure-img"></p>
<figcaption>Figure from <span class="citation" data-cites="dar2021farewell">Dar, Muthukumar, and Baraniuk (2021)</span></figcaption>
</figure>
</div>
<p>Such models may have near zero training error, yet do well on unseen data. As we increase complexity, we see something like a second bias-variance trade-off beyond the point where the data is perfectly fit (interpolated). This point is where model complexity (e.g.&nbsp;in terms of number of parameters) <em>p</em> equals the number of observations <em>N</em>, and this is where the realm of the overparameterized models begins. Now test error begins to drop again with increasing complexity.</p>
</section>
</section>
<section id="an-example" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="an-example">An example</h2>
<p>I thought it would be amusing to try this with the classic <code>mtcars</code> data set available in base R. With this data, our goal will be to predict fuel consumption in miles per gallon (<code>mpg</code>). First we will split the data into training and test components. We create a model where our number of parameters (<code>p</code>), in this case standard regression coefficients, will equal the number of observations (<code>N</code>). Some of the more technically savvy will know that if the number of features and/or parameters to estimate <code>p</code> equals the number of observations <code>N</code>, a standard linear regression model will fit the data perfectly<sup>1</sup>, demonstrated below.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>If not familiar, the <code>mtcars</code> object is a data frame that comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).</p>
</div></div><div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">nc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mtcars) </span>
<span id="cb1-2">nr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> nc</span>
<span id="cb1-3">fit_perfect <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>nr, ])</span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># summary(fit_perfect) # not shown, all inferential estimates are NaN</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-10-30-double-descent/index_files/figure-html/vis-fit-perfect-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>Now let’s look at the test error, our prediction on the unseen data we didn’t use in fitting the model. When we do, we see the usual bias-variance trade-off. Our generalizability capabilities have plummeted, as we have overfit the training data and were unable to accommodate unseen observations. We are even predicting negative mpg in some cases!</p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/posts/2021-10-30-double-descent/index_files/figure-html/vis-fit-perfect-test-1.svg" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<section id="p-n" class="level3">
<h3 class="anchored" data-anchor-id="p-n">p ≤ N</h3>
<p>Let’s extend the demonstration more fully. We now create models of increasing complexity, starting with an intercept only model (i.e.&nbsp;just using the mean for prediction), to one where all other columns (10) in the data are predictors. Here I repeatedly sampled <code>mtcars</code> of size <img src="https://latex.codecogs.com/png.latex?N%20=%2010"> for training, the remainder for test, and also shuffled the columns each time, doing so for a total of 250 times<sup>2</sup>. Here is the result- the classic bias variance trade-off curve. The larger dot shows the test error minimum, at about 3 covariates (plus intercept). The vertical line denotes our point of interpolation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/img/double-descent/dd_mtcars_under.svg" class="img-fluid figure-img"></p>
<figcaption>Double Descent in the underparameterized setting.</figcaption>
</figure>
</div>
</section>
<section id="p-n-1" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="p-n-1">p &gt; N</h3>
<p>So with one of the simpler data sets around we were able to demonstrate the bias-variance trade-off clearly. But now let’s try overparameterized models! We don’t need anything fancy or complicated to do this, so for our purposes, I’m just going to add cubic spline basis expansions for the <code>wt</code>, <code>disp</code>, and <code>hp</code> features<sup>3</sup>. This will definitely be enough to put us in a situation where we have more parameters than data, i.e.&nbsp;p &gt; N, but doesn’t make things too abstract<sup>4</sup>.</p>
<p>The basic linear model approach we might typically use fails to estimate the additional parameters in this situation, so we need a different estimator. Some are familiar with penalized regression techniques such as <em>lasso</em> and <em>ridge</em> regression, and we could use those here. However, I’ll use <em>ridgeless regression</em>, as depicted in <span class="citation" data-cites="hastie2019surprises">Hastie et al. (2019)</span>, and which, like ridge regression, is a straightforward variant of the usual least squares regression<sup>5</sup>. I estimate the coefficients/weights on the training data, and make predictions for the training and test set, calculating their respective errors. Here is an example of the primary function used.</p>
<div class="cell" data-layout-align="center" data-code_folding="true">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">fit_ridgeless <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span>(X_train, y, X_test, y_test){</span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get the coefficient estimates</span></span>
<span id="cb2-3">  b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pseudo_inv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crossprod</span>(X_train)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crossprod</span>(X_train, y)</span>
<span id="cb2-4">  </span>
<span id="cb2-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get training/test predictions</span></span>
<span id="cb2-6">  predictions_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> X_train <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> b</span>
<span id="cb2-7">  predictions_test  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> X_test <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> b</span>
<span id="cb2-8">  </span>
<span id="cb2-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get training/test error</span></span>
<span id="cb2-10">  rmse_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> predictions_train[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb2-11">  rmse_test  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sqrt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((y_test <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> predictions_test[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb2-12">  </span>
<span id="cb2-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return result</span></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb2-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> b,</span>
<span id="cb2-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">predictions_train =</span> predictions_train,</span>
<span id="cb2-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">predictions_test  =</span> predictions_test,</span>
<span id="cb2-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rmse_train =</span> rmse_train,</span>
<span id="cb2-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rmse_test  =</span> rmse_test</span>
<span id="cb2-20">  )</span>
<span id="cb2-21">}</span></code></pre></div>
</div>
<p>We can test the function as follows with as little as 10 observations, where p (all predictor coefficients plus intercept = 11 parameters) is greater than N (10). This demonstrates that the ridgeless approach can provide an estimate for all the parameters (unlike the standard <code>lm</code> function), and we also see very low training error, but relatively high test error (in terms of the root mean square error.)</p>
<div class="cell" data-layout-align="center" data-code_folding="true">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, mtcars[, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]))</span>
<span id="cb3-4">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mpg is the first column</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">X_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> X[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n, ]</span>
<span id="cb3-7">y_train <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n]</span>
<span id="cb3-8">X_test  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> X[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n),]</span>
<span id="cb3-9">y_test  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> y[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>n)]</span>
<span id="cb3-10"></span>
<span id="cb3-11">result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fit_ridgeless</span>(X_train, y_train, X_test, y_test)</span></code></pre></div>
</div>
<div id="tbl-test-fit-ridgeless" class="cell anchored" data-layout-align="center">
<div class="cell-output-display">
<div id="ikdmqttnwq" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>@import url("https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Libre+Franklin:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
#ikdmqttnwq table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#ikdmqttnwq thead, #ikdmqttnwq tbody, #ikdmqttnwq tfoot, #ikdmqttnwq tr, #ikdmqttnwq td, #ikdmqttnwq th {
  border-style: none;
}

#ikdmqttnwq p {
  margin: 0;
  padding: 0;
}

#ikdmqttnwq .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: none;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#ikdmqttnwq .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#ikdmqttnwq .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#ikdmqttnwq .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#ikdmqttnwq .gt_heading {
  background-color: #FFFFFF;
  text-align: left;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ikdmqttnwq .gt_bottom_border {
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ikdmqttnwq .gt_col_headings {
  border-top-style: none;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: none;
  border-bottom-width: 1px;
  border-bottom-color: #334422;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ikdmqttnwq .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 12px;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#ikdmqttnwq .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 12px;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#ikdmqttnwq .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#ikdmqttnwq .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#ikdmqttnwq .gt_column_spanner {
  border-bottom-style: none;
  border-bottom-width: 1px;
  border-bottom-color: #334422;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#ikdmqttnwq .gt_spanner_row {
  border-bottom-style: hidden;
}

#ikdmqttnwq .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#ikdmqttnwq .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#ikdmqttnwq .gt_from_md > :first-child {
  margin-top: 0;
}

#ikdmqttnwq .gt_from_md > :last-child {
  margin-bottom: 0;
}

#ikdmqttnwq .gt_row {
  padding-top: 7px;
  padding-bottom: 7px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#ikdmqttnwq .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#ikdmqttnwq .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#ikdmqttnwq .gt_row_group_first td {
  border-top-width: 2px;
}

#ikdmqttnwq .gt_row_group_first th {
  border-top-width: 2px;
}

#ikdmqttnwq .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikdmqttnwq .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#ikdmqttnwq .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#ikdmqttnwq .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ikdmqttnwq .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikdmqttnwq .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#ikdmqttnwq .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#ikdmqttnwq .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#ikdmqttnwq .gt_table_body {
  border-top-style: none;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #FFFFFF;
}

#ikdmqttnwq .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ikdmqttnwq .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikdmqttnwq .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ikdmqttnwq .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ikdmqttnwq .gt_left {
  text-align: left;
}

#ikdmqttnwq .gt_center {
  text-align: center;
}

#ikdmqttnwq .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#ikdmqttnwq .gt_font_normal {
  font-weight: normal;
}

#ikdmqttnwq .gt_font_bold {
  font-weight: bold;
}

#ikdmqttnwq .gt_font_italic {
  font-style: italic;
}

#ikdmqttnwq .gt_super {
  font-size: 65%;
}

#ikdmqttnwq .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#ikdmqttnwq .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#ikdmqttnwq .gt_indent_1 {
  text-indent: 5px;
}

#ikdmqttnwq .gt_indent_2 {
  text-indent: 10px;
}

#ikdmqttnwq .gt_indent_3 {
  text-indent: 15px;
}

#ikdmqttnwq .gt_indent_4 {
  text-indent: 20px;
}

#ikdmqttnwq .gt_indent_5 {
  text-indent: 25px;
}
</style>

<table class="gt_table caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<thead>
<tr class="gt_col_headings header">
<th id="b" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase" scope="col">b</th>
</tr>
</thead>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">0.84</td>
</tr>
<tr class="even">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">−1.69</td>
</tr>
<tr class="odd">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">0.08</td>
</tr>
<tr class="even">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">−0.08</td>
</tr>
<tr class="odd">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">2.76</td>
</tr>
<tr class="even">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">−1.29</td>
</tr>
<tr class="odd">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">0.24</td>
</tr>
<tr class="even">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">2.32</td>
</tr>
<tr class="odd">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">3.26</td>
</tr>
<tr class="even">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">2.26</td>
</tr>
<tr class="odd">
<td class="gt_row gt_right" headers="b" style="font-family: 'Source Sans Pro'; font-weight: 400">0.66</td>
</tr>
</tbody>
</table>

</div>
</div>
<div class="cell-output-display">
<div id="ltoophxgfc" style="padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;">
<style>@import url("https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Libre+Franklin:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Source+Sans+Pro:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
#ltoophxgfc table {
  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#ltoophxgfc thead, #ltoophxgfc tbody, #ltoophxgfc tfoot, #ltoophxgfc tr, #ltoophxgfc td, #ltoophxgfc th {
  border-style: none;
}

#ltoophxgfc p {
  margin: 0;
  padding: 0;
}

#ltoophxgfc .gt_table {
  display: table;
  border-collapse: collapse;
  line-height: normal;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: none;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#ltoophxgfc .gt_caption {
  padding-top: 4px;
  padding-bottom: 4px;
}

#ltoophxgfc .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#ltoophxgfc .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 3px;
  padding-bottom: 5px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#ltoophxgfc .gt_heading {
  background-color: #FFFFFF;
  text-align: left;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ltoophxgfc .gt_bottom_border {
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ltoophxgfc .gt_col_headings {
  border-top-style: none;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: none;
  border-bottom-width: 1px;
  border-bottom-color: #334422;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#ltoophxgfc .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 12px;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#ltoophxgfc .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 12px;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#ltoophxgfc .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#ltoophxgfc .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#ltoophxgfc .gt_column_spanner {
  border-bottom-style: none;
  border-bottom-width: 1px;
  border-bottom-color: #334422;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#ltoophxgfc .gt_spanner_row {
  border-bottom-style: hidden;
}

#ltoophxgfc .gt_group_heading {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  text-align: left;
}

#ltoophxgfc .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#ltoophxgfc .gt_from_md > :first-child {
  margin-top: 0;
}

#ltoophxgfc .gt_from_md > :last-child {
  margin-bottom: 0;
}

#ltoophxgfc .gt_row {
  padding-top: 7px;
  padding-bottom: 7px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#ltoophxgfc .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
}

#ltoophxgfc .gt_stub_row_group {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 5px;
  padding-right: 5px;
  vertical-align: top;
}

#ltoophxgfc .gt_row_group_first td {
  border-top-width: 2px;
}

#ltoophxgfc .gt_row_group_first th {
  border-top-width: 2px;
}

#ltoophxgfc .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ltoophxgfc .gt_first_summary_row {
  border-top-style: solid;
  border-top-color: #D3D3D3;
}

#ltoophxgfc .gt_first_summary_row.thick {
  border-top-width: 2px;
}

#ltoophxgfc .gt_last_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#ltoophxgfc .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#ltoophxgfc .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#ltoophxgfc .gt_last_grand_summary_row_top {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-bottom-style: double;
  border-bottom-width: 6px;
  border-bottom-color: #D3D3D3;
}

#ltoophxgfc .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#ltoophxgfc .gt_table_body {
  border-top-style: none;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #FFFFFF;
}

#ltoophxgfc .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ltoophxgfc .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ltoophxgfc .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#ltoophxgfc .gt_sourcenote {
  font-size: 90%;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 5px;
  padding-right: 5px;
}

#ltoophxgfc .gt_left {
  text-align: left;
}

#ltoophxgfc .gt_center {
  text-align: center;
}

#ltoophxgfc .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#ltoophxgfc .gt_font_normal {
  font-weight: normal;
}

#ltoophxgfc .gt_font_bold {
  font-weight: bold;
}

#ltoophxgfc .gt_font_italic {
  font-style: italic;
}

#ltoophxgfc .gt_super {
  font-size: 65%;
}

#ltoophxgfc .gt_footnote_marks {
  font-size: 75%;
  vertical-align: 0.4em;
  position: initial;
}

#ltoophxgfc .gt_asterisk {
  font-size: 100%;
  vertical-align: 0;
}

#ltoophxgfc .gt_indent_1 {
  text-indent: 5px;
}

#ltoophxgfc .gt_indent_2 {
  text-indent: 10px;
}

#ltoophxgfc .gt_indent_3 {
  text-indent: 15px;
}

#ltoophxgfc .gt_indent_4 {
  text-indent: 20px;
}

#ltoophxgfc .gt_indent_5 {
  text-indent: 25px;
}
</style>

<table class="gt_table caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-quarto-disable-processing="false" data-quarto-bootstrap="false">
<thead>
<tr class="gt_col_headings header">
<th id="rmse_train" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase" scope="col">rmse_train</th>
<th id="rmse_test" class="gt_col_heading gt_columns_bottom_border gt_right" data-quarto-table-cell-role="th" style="color: #A9A9A9; font-family: 'Source Sans Pro'; text-transform: uppercase" scope="col">rmse_test</th>
</tr>
</thead>
<tbody class="gt_table_body">
<tr class="odd">
<td class="gt_row gt_right" headers="rmse_train" style="font-family: 'Source Sans Pro'; font-weight: 400">0.05</td>
<td class="gt_row gt_right" headers="rmse_test" style="font-family: 'Source Sans Pro'; font-weight: 400">5.79</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>If we do this for more complex models (max linear features, plus each additional set of features associated with a cubic spline basis expansions), we obtain the following. Now we see the second descent in test error takes form!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/img/double-descent/dd_mtcars_over.svg" class="img-fluid figure-img"></p>
<figcaption>Double Descent in the overparameterized setting.</figcaption>
</figure>
</div>
<p>Putting our results together gives us the double descent curve.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://m-clark.github.io/img/double-descent/dd_mtcars.svg" class="img-fluid figure-img"></p>
<figcaption>Double Descent in the overparameterized setting.</figcaption>
</figure>
</div>
<aside>
Note that this all holds for the most part with classification problems, including multiclass (or multivariate/class targets).
</aside>
<p>We not only see the double descent pattern, but we can also note that the global test error minimum occurs with the model with the most parameters. The gray dot is the lowest test error with the underparameterized settings, while the dark red is the global test error minimum.</p>
</section>
</section>
<section id="why-does-this-happen" class="level2">
<h2 class="anchored" data-anchor-id="why-does-this-happen">Why does this happen?</h2>
<p>Understanding the double descent phenomenon is an area of active research, and there are some technical issues we won’t cover here. However, we can note a couple things more broadly. When we’re in the underparameterized situation, we ultimately begin to force features that have no association with the target to fit the data anyway. Once you move beyond the point of where these features are useful, test error begins to rise again, until the point of interpolation where test error is even worse than guessing (or just guessing in the classification case).</p>
<p>Beyond the interpolation point, all models we potentially employ using this estimation technique will have the capacity to fit the training data perfectly, i.e.&nbsp;zero bias. This allows us to fit the remaining noise in the data with the additional features employed by the more complex models. There is no guarantee that among the models you fit that the lowest test error will be found relative to the underparameterized setting. However, the lowest test error to be found is ‘out there’ somewhere<sup>6</sup>. So adding complexity will potentially allow you to find improved test error.</p>
<p>Another way to put it is that we have a single class of models to consider, and under and overparameterized are special cases of that more general class. Any one of these might result in the lowest test error. The overparameterized models, which may contain complex nonlinearities and interactions, are likely to be more compatible with the data than the simpler models<sup>7</sup>. So odds are good that at least one of them will have a smaller test error as well. In any case, restricting ourselves to the underparameterized setting is definitely no guarantee that we will find the most performant model.</p>
<p>One caveat is that the model we used is an example of ‘implicit’ regularization, one in which there is no hyper-parameter to set (or discover through cross-validation), like with ridge and lasso. With other techniques (e.g.&nbsp;optimally chosen ridge regression estimator) we may still be able to achieve optimal test error without complete interpolation, and show a reduced peak.</p>
<p><span class="citation" data-cites="dar2021farewell">Dar, Muthukumar, and Baraniuk (2021)</span> note that in the overparameterized setting, we can distinguish the signal part of the error term that reduces as a function of N/p, where the noise part of the error term is a function of p/N. In addition, there is a portion of test error related to model misspecification, which will always decrease with overparameterization. In addition, one must consider both feature correlations as well as correlations among observations. Having more complex covariance structure doesn’t negate the double descent phenomenon, but they suggest that, for example, cases where there is low effective dimension within these additional features will more readily display the double descent.</p>
<p>Another issue is that in any given situation it is difficult to know where in the realm of available models we exist presently. So additional complexity, or even additional data, may in fact hurt performance <span class="citation" data-cites="nakkiran2019deep">(Nakkiran et al. 2019)</span>.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The double descent phenomenon is a quite surprising scenario, especially for those who have only heard of the classical bias-variance trade off. There is still much to learn regarding it, but such research is off and running. For practical purposes, it is worth keeping it in mind to aid us in model selection and thinking about our modeling strategies in general.</p>
<!-- [^ridgeless]:  -->



</section>


<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-belkin2019reconciling" class="csl-entry">
Belkin, Mikhail, Daniel Hsu, Siyuan Ma, and Soumik Mandal. 2019. <span>“Reconciling Modern Machine-Learning Practice and the Classical Bias–Variance Trade-Off.”</span> <em>Proceedings of the National Academy of Sciences</em> 116 (32): 15849–54.
</div>
<div id="ref-dar2021farewell" class="csl-entry">
Dar, Yehuda, Vidya Muthukumar, and Richard G Baraniuk. 2021. <span>“A Farewell to the Bias-Variance Tradeoff? An Overview of the Theory of Overparameterized Machine Learning.”</span> <em>arXiv Preprint arXiv:2109.02355</em>.
</div>
<div id="ref-hastie2019surprises" class="csl-entry">
Hastie, Trevor, Andrea Montanari, Saharon Rosset, and Ryan J Tibshirani. 2019. <span>“Surprises in High-Dimensional Ridgeless Least Squares Interpolation.”</span> <em>arXiv Preprint arXiv:1903.08560</em>.
</div>
<div id="ref-nakkiran2019deep" class="csl-entry">
Nakkiran, Preetum, Gal Kaplun, Yamini Bansal, Tristan Yang, Boaz Barak, and Ilya Sutskever. 2019. <span>“Deep Double Descent: Where Bigger Models and More Data Hurt.”</span> <em>arXiv Preprint arXiv:1912.02292</em>.
</div>
</div></section><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>R<sup>2</sup> = 1 in the standard linear model setting.↩︎</p></li>
<li id="fn2"><p>Note that the intercept term is added after data shuffling so when p = 1 it is the intercept only model, i.e.&nbsp;guessing the mean.↩︎</p></li>
<li id="fn3"><p>I used <span class="pack" style="">mgcv</span> to so this, then added them in whole for each term to the previously shuffled model matrix. These columns are not shuffled. By default these will add 10 columns each to the model matrix.↩︎</p></li>
<li id="fn4"><p>For more on generalized additive models, see <a href="https://m-clark.github.io/generalized-additive-models/">my document</a>.↩︎</p></li>
<li id="fn5"><p>Ridgeless regression has the same form as the ‘normal’ equations for least squares, but instead of <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%5Csim%20(X%5ETX)%5E%7B-1%7D%20%5Ccdot%20X%5ETy">, we have <img src="https://latex.codecogs.com/png.latex?%5Cbeta%20%5Csim%20(X%5ETX)%5E%7B+%7D%20%5Ccdot%20X%5ETy"> where the first part is the pseudo-inverse of <img src="https://latex.codecogs.com/png.latex?X">. It is similar to equations for ridge regression (see my demo <a href="https://m-clark.github.io/models-by-example/penalized-maximum-likelihood.html#l2-ridge-regularization">here</a>) and can be seen as an approximation to it as the ridge penalty tends toward zero.↩︎</p></li>
<li id="fn6"><p>Fox Mulder told me so.↩︎</p></li>
<li id="fn7"><p>Because nature is just funny that way.↩︎</p></li>
</ol>
</section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{clark2021,
  author = {Clark, Michael},
  title = {Double {Descent}},
  date = {2021-11-13},
  url = {https://m-clark.github.io/posts/2021-10-30-double-descent/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-clark2021" class="csl-entry quarto-appendix-citeas">
Clark, Michael. 2021. <span>“Double Descent.”</span> November 13, 2021.
<a href="https://m-clark.github.io/posts/2021-10-30-double-descent/">https://m-clark.github.io/posts/2021-10-30-double-descent/</a>.
</div></div></section></div> ]]></description>
  <category>deep learning</category>
  <category>machine learning</category>
  <guid>https://m-clark.github.io/posts/2021-10-30-double-descent/</guid>
  <pubDate>Sat, 13 Nov 2021 05:00:00 GMT</pubDate>
  <media:content url="https://m-clark.github.io/img/double-descent/dd_mtcars.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>This is definitely not all you need</title>
  <dc:creator>Michael Clark</dc:creator>
  <link>https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/</link>
  <description><![CDATA[ 





<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>I’ve been a little perplexed at the lack of attention of deep learning (DL) toward what I consider to be ‘default’ data in my world, often referred to as <em>tabular data</em>, where typically we have a two dimensional input of observations (rows) and features (columns) and inputs are of varying type, scale and source. Despite the ubiquity of such data in data science generally, and despite momentous advances in areas like computer vision and natural language processing, at this time, it’s not very clear what the status of DL for tabular data is.</p>
<p>There have been developments in the area recently though, with some modeling approaches, such as TabNet, gaining traction. In June of 2021, I actually came across three papers on <a href="arxiv.org">Arxiv</a> that were making related claims about the efficacy of DL for tabular data. As in many academic and practical (and life) pursuits, results of these studies are nuanced, so I thought I’d help myself and others by summarizing here.</p>
</section>
<section id="goal" class="level2">
<h2 class="anchored" data-anchor-id="goal">Goal</h2>
<p>I want to know if, e.g.&nbsp;time and/or resources are limited, whether it will be worth diving into a DL model if I have a satisfactory simpler/easier one ready to implement that does pretty well. Perhaps this answer is already, ‘if it ain’t broke, don’t fix it’, but given the advancements in other data domains, it would be good to assess what the current state of DL with tabular data is.</p>
</section>
<section id="caveats" class="level2">
<h2 class="anchored" data-anchor-id="caveats">Caveats</h2>
<ul>
<li>I’m not going to do more than give a cursory summary of the articles, and provide no in-depth explanation of the models. For more detail, see the corresponding articles and references for the models therein. You are not going to learn how to use TabNet, NODE, transformers, etc., for tabular data.</li>
<li>There are other decent articles on the topic not covered here. Some are referenced in these more recent offerings, so feel free to peruse.</li>
</ul>
</section>
<section id="quick-take" class="level2">
<h2 class="anchored" data-anchor-id="quick-take">Quick Take</h2>
<p>In case you don’t want any detail, here’s a quick summary based on my impressions from these articles. Right now, if you want to use DL on tabular data, don’t make a fuss of it. A simple architecture, even a standard multi-layer perceptron, will likely do as well as more complicated ones. In general though, the amount of effort put into prep/tuning may not be worth it for many typical tabular data settings, for example, relative to a suitably flexible statistical model (e.g.&nbsp;GAMM) or a default fast boosting implementation like XGBoost. However, DL models are already thinking ‘big data’, so for very large data situations, a DL model might make a great choice, as others may not be computationally very viable. It also will not be surprising at all that in the near future some big hurdle may be overcome as we saw with DL applications in other fields, in which case some form of DL may be ‘all you need’.</p>
<p>Now, on to the rest!</p>
</section>
<section id="tabular-data-deep-learning-is-not-all-you-need" class="level2">
<h2 class="anchored" data-anchor-id="tabular-data-deep-learning-is-not-all-you-need">Tabular Data: Deep Learning is Not All You Need</h2>
<section id="paper-info" class="level3">
<h3 class="anchored" data-anchor-id="paper-info">Paper Info</h3>
<ul>
<li><em>Who</em>: Shwartz-Ziv &amp; Armon</li>
<li><em>Where</em>: Intel</li>
<li><em>When</em>: 2021-06-21 V1</li>
<li><a href="https://arxiv.org/pdf/2106.03253v1.pdf">Arxiv Link</a></li>
</ul>
</section>
<section id="from-the-abstract" class="level3">
<h3 class="anchored" data-anchor-id="from-the-abstract">From the Abstract</h3>
<blockquote class="blockquote">
<p>We analyze the deep models proposed in four recent papers across eleven datasets, nine of which were used in these papers, to answer these questions. We show that in most cases, each model performs best on the datasets used in its respective paper but significantly worse on other datasets. Moreover, our study shows that XGBoost (Chen and Guestrin, 2016) usually outperforms the deep models on these datasets. Furthermore, we demonstrate that the hyperparameter search process was much shorter for XGBoost.</p>
</blockquote>
</section>
<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p>For each model they used the data that was implemented in the original model papers by the authors (e.g.&nbsp;the dataset used in the TabNet article), and also used their suggested parameter settings. They tested all the models against their own data, plus the other papers’ data, plus two additional data sets that were not used in any of the original papers.</p>
</section>
<section id="data" class="level3">
<h3 class="anchored" data-anchor-id="data">Data</h3>
<p>They use eleven total datasets. Nine datasets are those used in the original papers on TabNet, DNF-Net, and NODE, drawing three datasets from each paper. Additionally, Shwartz-Ziv &amp; Armon use two Kaggle datasets not used in any of those papers. Sample sizes ranged from 7k to 1M, 10-2000 features, with two being numeric targets, while the other target variables ranged from 2-7 classes. Datasets are described in detail in the paper along with links to the source (all publicly available).</p>
</section>
<section id="models-explored" class="level3">
<h3 class="anchored" data-anchor-id="models-explored">Models Explored</h3>
<p>Brief summaries of the DL models are found in the paper.</p>
<ul>
<li><em>XGBoost</em></li>
<li><em>TabNet</em></li>
<li><em>Neural Oblivious Decision Ensembles</em> (NODE)</li>
<li><em>DNF-Net</em></li>
<li><em>1D-CNN</em></li>
</ul>
</section>
<section id="quick-summary" class="level3">
<h3 class="anchored" data-anchor-id="quick-summary">Quick Summary</h3>
<section id="not-counting-the-ensemble-methods" class="level5">
<h5 class="anchored" data-anchor-id="not-counting-the-ensemble-methods">Not counting the ensemble methods…</h5>
<ul>
<li>TabNet did best on all of its own data sets, but was not the best model on any other.</li>
<li>NODE each did best on 2 of its own 3 data sets, but not on any other.</li>
<li>DNF-Net best on one of its own 3 data sets, but not on any other.</li>
<li>XGBoost was best on the remaining 5 datasets.</li>
</ul>
</section>
<section id="counting-the-ensemble-methods" class="level5">
<h5 class="anchored" data-anchor-id="counting-the-ensemble-methods">Counting the ensemble methods…</h5>
<ul>
<li>TabNet did best on 2 of its own 3 data sets, but was not the best model on any other.</li>
<li>DNF-Net and NODE each did best on one of its own 3 data sets, but not on any other.</li>
<li>XGBoost was best on one dataset.</li>
</ul>
<p>Of those, XGB was notably better on ‘unseen’ data, and comparable to the best performing ensemble. A simple ensemble was also very performant. From the paper:</p>
<blockquote class="blockquote">
<p>The ensemble of all the models was the best model with 2.32% average relative increase, XGBoost was the second best with 3.4%, 1D-CNN had 7.5%, TabNet had 10.5%, DNF-Net had 11.8% and NODE had 14.2% (see Tables 2 and 3 in the appendix for full results).</p>
</blockquote>
<p>As a side note, XGBoost + DL was best, but that defeats the purpose in my opinion. Presumably any notably more complicated setting will be potentially better with enough complexity, but unless there is an obvious way on how to add such complexity, it’s mostly an academic exercise. However, as the authors note, if search is automated, maybe the complexity of combining the models is less of an issue.</p>
</section>
</section>
<section id="other-stuff" class="level3">
<h3 class="anchored" data-anchor-id="other-stuff">Other stuff</h3>
<section id="kudos" class="level5">
<h5 class="anchored" data-anchor-id="kudos">Kudos</h5>
<p>The authors cite the <a href="https://en.wikipedia.org/wiki/No_free_lunch_theorem">No Free Lunch theorem</a> in the second paragraph, something that appears to be lost on many (most?) of these types of papers touting small increases in performance for some given modeling approach.</p>
</section>
<section id="issues" class="level5">
<h5 class="anchored" data-anchor-id="issues">Issues</h5>
<p>There are always things like training process/settings that are difficult to fully replicate. By the time authors publish any paper, unless exact records are kept, the iterations (including discussions that rule out various paths) are largely lost to time. This isn’t a knock on this paper, just something to keep in mind.</p>
</section>
<section id="opinion" class="level5">
<h5 class="anchored" data-anchor-id="opinion">Opinion</h5>
<p>I liked this one in general. They start by giving the competing models their best chance with their own settings and data, which was processed and trained in the same way. Even then, those models still either didn’t perform best, and/or performed relatively poorly on any other dataset.</p>
</section>
</section>
</section>
<section id="regularization-is-all-you-need-simple-neural-nets-can-excel-on-tabular-data" class="level2">
<h2 class="anchored" data-anchor-id="regularization-is-all-you-need-simple-neural-nets-can-excel-on-tabular-data">Regularization is all you Need: Simple Neural Nets can Excel on Tabular Data</h2>
<section id="paper-info-1" class="level3">
<h3 class="anchored" data-anchor-id="paper-info-1">Paper Info</h3>
<ul>
<li><em>Who</em>: Kadra et al.</li>
<li><em>Where</em>: U of Freiburg, Leibniz U (Germany)</li>
<li><em>When</em>: 2021-06-06 V1</li>
<li><a href="https://arxiv.org/pdf/2106.11189.pdf4">Arxiv Link</a></li>
</ul>
</section>
<section id="from-the-abstract-1" class="level3">
<h3 class="anchored" data-anchor-id="from-the-abstract-1">From the Abstract</h3>
<blockquote class="blockquote">
<p>Tabular datasets are the last “unconquered castle” for deep learning… In this paper, we hypothesize that the key to boosting the performance of neural networks lies in rethinking the joint and simultaneous application of a large set of modern regularization techniques. As a result, we propose regularizing plain Multilayer Perceptron (MLP) networks by searching for the optimal combination/cocktail of 13 regularization techniques for each dataset using a joint optimization over the decision on which regularizers to apply and their subsidiary hyperparameters.</p>
</blockquote>
<blockquote class="blockquote">
<p>We empirically assess the impact of these regularization cocktails for MLPs on a large-scale empirical study comprising 40 tabular datasets and demonstrate that (i) well-regularized plain MLPs significantly outperform recent state-of-the-art specialized neural network architectures, and (ii) they even outperform strong traditional ML methods, such as XGBoost.</p>
</blockquote>
<blockquote class="blockquote">
<p>We emphasize that some of these publications claim to outperform Gradient Boosted Decision Trees (GDBT) [1, 37], and other papers explicitly stress that their neural networks do not outperform GBDT on tabular datasets [38, 22]. In contrast, we do not propose a new kind of neural architecture, but a novel paradigm for learning a combination of regularization methods.**</p>
</blockquote>
</section>
<section id="overview-1" class="level3">
<h3 class="anchored" data-anchor-id="overview-1">Overview</h3>
<p>This data is more about exploring regularization techniques (e.g.&nbsp;data augmentation, model averaging via dropout) rather than suggesting any particular model is superior. Even in the second paragraph they state their results do not suggest a performance gain over boosting methods. Their focus is on potentially improving DL for tabular data through regularization with two hypotheses:</p>
<ul>
<li>Regularization cocktails outperform state-of-the-art deep learning architectures on tabular datasets.</li>
<li>Regularization cocktails outperform Gradient-Boosted Decision Trees, as the most commonly used traditional ML method for tabular data.</li>
</ul>
</section>
<section id="data-1" class="level3">
<h3 class="anchored" data-anchor-id="data-1">Data</h3>
<p>Forty total datasets ranging from as little as ~400 observations to over 400k, and between 4 and 2000 features. All were categorical targets, with about half binary. All available at openml.org with target ID provided.</p>
</section>
<section id="models-explored-1" class="level3">
<h3 class="anchored" data-anchor-id="models-explored-1">Models Explored</h3>
<p>Comparison models:</p>
<ul>
<li><em>TabNet</em>: (with author’s proposed defaults)</li>
<li><em>NODE</em>: (with author’s proposed defaults)</li>
<li><em>Autogluon</em>: Tabular: can use other techniques but restricted to ensembles of neural nets for this demo</li>
<li><em>ASK-GBDT</em>: GB via Auto-sklearn (Note this tool comes from one of the authors )</li>
<li><em>XGBoost</em>: Original implementation</li>
<li><em>MLP</em>: Multilayer Perceptron - 9 layers with 512 hidden units each.</li>
<li><em>MLP+D</em>: MLP with Dropout</li>
<li><em>MLP+C</em>: MLP with regularization cocktail</li>
</ul>
</section>
<section id="quick-summary-1" class="level3">
<h3 class="anchored" data-anchor-id="quick-summary-1">Quick Summary</h3>
<ul>
<li>To begin, their regularization cocktail approach is the clear winner on these datasets, having one outright on over 40% of them (based on table 2).</li>
<li>Standard XGB performed best (or tied for best) 8 of the 40 data sets, while it or ASK-GBDT were best for 12 datasets combined.</li>
<li>Simple MLP was best once, while MLP with dropout was best 5 times, while the cocktail method was best in general, across 19 datasets.</li>
<li>The ‘fancy’ DL models were the worst performers across the board. TabNet never performed best, and NODE only did once, but the latter also repeatedly failed due to memory issues or run-time limitations (this memory issue was mentioned in the previous paper also).</li>
<li>Head-to-head, the cocktail beat the standard XGB 26 out of 38 times with three ties. So it wins 65% of the time against XGB, 70% against ASK-GBDT, but 60% against either (i.e.&nbsp;some XGB approach).</li>
</ul>
</section>
<section id="other-stuff-1" class="level3">
<h3 class="anchored" data-anchor-id="other-stuff-1">Other Stuff</h3>
<section id="kudos-1" class="level5">
<h5 class="anchored" data-anchor-id="kudos-1">Kudos</h5>
<ul>
<li>Recognize that tabular data is understudied in mainstream DL literature</li>
<li>They used a lot of datasets</li>
<li>They look at the simplest DL models for comparison</li>
</ul>
</section>
<section id="issues-1" class="level5">
<h5 class="anchored" data-anchor-id="issues-1">Issues</h5>
<ul>
<li><p>I wonder why there was not a single numeric outcome among so many datasets. Furthermore, some of the data are image classification (e.g.&nbsp;Fashion-MNIST), so I’m not sure why they’re included. I wouldn’t use a ‘tabular’ technique when standard computer vision approaches already work so well.</p></li>
<li><p>I’m not familiar with the augmentation techniques they mention, which were devised for image classification, but there have been some used for tabular data for a couple decades at this point that were not mentioned, including simple upsampling, or imputation methods (e.g.&nbsp;SMOTE). That’s not a beef with the article at all, I’ve long wondered why people haven’t been using data augmentation for tabular data given it’s success elsewhere (including for tabular data!).</p></li>
<li><p>They use a standard t-tests of ranks, but if we’re going to use this sort of approach, we’d maybe want to adjust for all the tests done, and probably for all pairwise comparisons (they show such a table for the regularization methods). Depending on the approach and cutoff, the XGB vs.&nbsp;Cocktail difference may not be significant.</p></li>
<li><p>Also, I couldn’t duplicate these p-values with R’s default settings for Wilcoxon signed rank tests, and there does in fact seem to be inconsistency between the detailed results and Wilcoxon summaries. For example, in the regularization tests of Table 9, <code>Cocktail</code> vs.&nbsp;<code>WD</code> and <code>DO</code> shows two ties in the first four data sets, yet only 1 tie is reported in the comparison chart for both (Figure 4). For the models, Table 2 show 3 ties of <code>XGB</code> &amp; the <code>Cocktail</code>, with 1 for <code>ASK-G</code> and <code>Cocktail</code>, but 2 and 0 are reported for their Wilcoxon tests. It’s not clear what they did for NODE with all the NAs. I do not believe these discrepancies, nor adjusting for multiple comparisons, will change the results (I re-did those myself).</p></li>
</ul>
</section>
<section id="opinion-1" class="level5">
<h5 class="anchored" data-anchor-id="opinion-1">Opinion</h5>
<p>If we ignore the regularization focus and just look at the model comparisons, I’m not overly convinced we have a straightforward victory for cocktail vs.&nbsp;GB as implied in the conclusion. Results appear to be in favor of their proposed method, but not enough to be a near-guarantee in a particular setting, so we’re back to square one of just using the easier/faster/better tool. I’m also not sure who was questioning the use of regularization for neural networks or modeling in general, so the comparison to any model without some form of regularization isn’t as interesting to me. What is interesting to me is that we have another round of evidence that the fancier DL models like TabNet do not perform that well relative to GB or simpler DL architectures.</p>
</section>
</section>
</section>
<section id="revisiting-deep-learning-models-for-tabular-data" class="level2">
<h2 class="anchored" data-anchor-id="revisiting-deep-learning-models-for-tabular-data">Revisiting Deep Learning Models for Tabular Data</h2>
<section id="paper-info-2" class="level3">
<h3 class="anchored" data-anchor-id="paper-info-2">Paper Info</h3>
<ul>
<li><em>Who</em>: Yury Gorishniy, Ivan Rubachev, Valentin Khrulkov, Artem Babenko</li>
<li><em>Where</em>: Yandex (Russia)</li>
<li><em>When</em>: 2021-06-22</li>
<li><a href="https://arxiv.org/abs/2106.11959">Arxiv Link</a></li>
<li><a href="https://github.com/yandex-research/rtdl">Source code</a></li>
</ul>
</section>
<section id="from-the-abstract-2" class="level3">
<h3 class="anchored" data-anchor-id="from-the-abstract-2">From the Abstract</h3>
<blockquote class="blockquote">
<p>The necessity of deep learning for tabular data is still an unanswered question addressed by a large number of research efforts. The recent literature on tabular DL proposes several deep architectures reported to be superior to traditional “shallow” models like Gradient Boosted Decision Trees. However, since existing works often use different benchmarks and tuning protocols, it is unclear if the proposed models universally outperform GBDT. Moreover, the models are often not compared to each other, therefore, it is challenging to identify the best deep model for practitioners.</p>
</blockquote>
<blockquote class="blockquote">
<p>In this work, we start from a thorough review of the main families of DL models recently developed for tabular data. We carefully tune and evaluate them on a wide range of datasets and reveal two significant findings. First, we show that the choice between GBDT and DL models highly depends on data and there is still no universally superior solution. Second, we demonstrate that a simple ResNet-like architecture is a surprisingly effective baseline, which outperforms most of the sophisticated models from the DL literature. Finally, we design a simple adaptation of the Transformer architecture for tabular data that becomes a new strong DL baseline and reduces the gap between GBDT and DL models on datasets where GBDT dominates.</p>
</blockquote>
</section>
<section id="overview-2" class="level3">
<h3 class="anchored" data-anchor-id="overview-2">Overview</h3>
<p>This paper compares different models on a variety of datasets. They are interested in the GB vs.&nbsp;DL debate, but like the previous paper, also interested in how well a simpler DL architecture might perform, and what steps might help the more complicated ones do better.</p>
</section>
<section id="data-2" class="level3">
<h3 class="anchored" data-anchor-id="data-2">Data</h3>
<p>They have 11 datasets with a mix of binary, multiclass and numeric targets. Sizes range from 20K to 1M+. There appears to be some overlap with the first paper (e.g.&nbsp;Higgs, Cover type).</p>
</section>
<section id="models-explored-2" class="level3">
<h3 class="anchored" data-anchor-id="models-explored-2">Models Explored</h3>
<section id="baselines" class="level5">
<h5 class="anchored" data-anchor-id="baselines">‘Baselines’</h5>
<ul>
<li><em>XGBoost</em></li>
<li><em>CatBoost</em></li>
<li><em>MLP</em></li>
<li><em>ResNet</em></li>
</ul>
</section>
<section id="dl-comparisons" class="level5">
<h5 class="anchored" data-anchor-id="dl-comparisons">DL Comparisons</h5>
<ul>
<li><em>SNN</em></li>
<li><em>NODE</em></li>
<li><em>TabNet</em></li>
<li><em>GrowNet</em></li>
<li><em>DCN V2</em></li>
<li><em>AutoInt</em></li>
</ul>
<p>In addition, they look at ensembles of these models, but this is not of interest to me for this post.</p>
</section>
</section>
<section id="quick-summary-2" class="level3">
<h3 class="anchored" data-anchor-id="quick-summary-2">Quick Summary</h3>
<p>Note that these refer to the ‘single model’ results, not the results for ensembles.</p>
<ul>
<li><p>Some form of boosting performed best on 4 of the 11 datasets.</p></li>
<li><p>ResNet was best on four classification tasks, but not once for numeric targets.</p></li>
<li><p>At this point you won’t be surprised at what doesn’t perform as well- TabNet, NODE, and similar. TabNet, DCN, and GrowNet were never the best performer, and the other three were best one time a piece.</p></li>
<li><p>MLP did not perform best on any data, however the authors note that it ‘is often on par or even better than some of the recently proposed DL models’.</p></li>
<li><p>They also looked at models with a ‘simple’ transformer architecture. Their results suggest better performance than the other DL models, and similar performance to ResNet.</p></li>
</ul>
</section>
<section id="other-stuff-2" class="level3">
<h3 class="anchored" data-anchor-id="other-stuff-2">Other Stuff</h3>
<section id="kudos-2" class="level5">
<h5 class="anchored" data-anchor-id="kudos-2">Kudos</h5>
<ul>
<li><p>Sharing the source code!</p></li>
<li><p>Recognizing that results at this point are complex at best given the lack of standard datasets</p></li>
</ul>
</section>
<section id="issues-2" class="level5">
<h5 class="anchored" data-anchor-id="issues-2">Issues</h5>
<ul>
<li>They note a distinction between <em>heterogeneous</em> vs.&nbsp;other types of data. They call data heterogeneous if the predictors are of mixed data types (e.g.&nbsp;categorical, numeric, count), while something like pixel data would be <em>homogeneous</em> because all the columns are essentially the same type. The latter isn’t as interesting to me for this sort enterprise, and I think the former is what most are thinking about for ‘tabular’ data, otherwise we’d just call it what it is (e.g.&nbsp;image or text data), and modeling/estimation is generally quite a bit easier when all the data is the same type. I do think it’s important that they point out that GB is better with heterogeneous data, and I think if you only look at such data, you’d likely see GB methods still outperforming or at worst on par with the best DL methods.</li>
</ul>
</section>
<section id="opinion-2" class="level5">
<h5 class="anchored" data-anchor-id="opinion-2">Opinion</h5>
<p>These results seem consistent with others at this point. Complex DL isn’t helping, and simpler architectures, even standard MLP show good performance. In the end, we still don’t have any clear winner over GB methods.</p>
</section>
</section>
</section>
<section id="overall-assessment" class="level2">
<h2 class="anchored" data-anchor-id="overall-assessment">Overall Assessment</h2>
<p>These papers put together are helpful in painting a picture of where we are at present with deep learning for tabular data, especially with mixed data types. In this setting, it seems that more complicated DL models do not seem to have any obvious gain over simpler architectures, which themselves do not consistently beat boosting methods. It may also be the case that for data of mixed data types/sources, boosting is still the standard to beat.</p>
<p>Even though these articles are geared toward comparisons to GB/XGBoost, in several settings I’ve applied them, I typically do not necessarily have appreciably greater success compared to a default setting random forest (e.g.&nbsp;from the <span class="pack" style="">ranger</span> package in R), or sufficiently flexible statistical model. Unfortunately this comparison is lacking from the papers, and would have been nice to have, especially for smaller data settings where such models are still very viable. I think a viable fast model, preferably one without any tuning required (or which simply is taken off the shelf) should be the baseline.</p>
<p>In that light, for tabular data I think one should maybe start with a baseline of a penalized regression with appropriate interactions (e.g.&nbsp;ridge/lasso), or a more flexible penalized approach (GAMM) as a baseline, the latter especially, as it can at least automatically incorporate nonlinear relationships, and tools like <span class="pack" style="">mgcv</span> or <span class="pack" style="">gpboost</span> in R can do so with very large data (1 million +) in a matter of seconds. In settings of relatively higher dimensions, interactions and nonlinearities should be prevalent enough such that basis function, tree, and DL models should be superior. Whether they are practically so is the key concern even in those settings. With smaller, noisier data of less dimension, I suspect the tuning/time effort with present day DL models for tabular data will likely not be worth it. This may change very soon however, so such an assumption should be regularly checked.</p>
<p><br> <br></p>
<p>last updated: 2024-12-27</p>
<p>Neural Net image source from <a href="https://uc-r.github.io/2018/04/09/feedforward-deep-models/">UC Business Analytics R Programming Guide</a></p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-gorishniy2021tabular" class="csl-entry">
Gorishniy, Yuri, Ivan Rubachev, Valentin Khrulkov, and Artem Babenko. 2021. <span>“Revisiting Deep Learning Models for Tabular Data.”</span> <em>arXiv Preprint arXiv:2106.11959</em>.
</div>
<div id="ref-kadra2021tabular" class="csl-entry">
Kadra, Arlind, Marius Lindauer, Frank Hutter, and Josif Grabocka. 2021. <span>“Regularization Is All You Need: Simple Neural Nets Can Excel on Tabular Data.”</span> <em>arXiv Preprint arXiv:2106.11189</em>.
</div>
<div id="ref-shwartz2021tabular" class="csl-entry">
Shwartz-Ziv, Ravid, and Amitai Armon. 2021. <span>“Tabular Data: Deep Learning Is Not All You Need.”</span> <em>arXiv Preprint arXiv:2106.03253</em>.
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{clark2021,
  author = {Clark, Michael},
  title = {This Is Definitely Not All You Need},
  date = {2021-07-19},
  url = {https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-clark2021" class="csl-entry quarto-appendix-citeas">
Clark, Michael. 2021. <span>“This Is Definitely Not All You
Need.”</span> July 19, 2021. <a href="https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/">https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/</a>.
</div></div></section></div> ]]></description>
  <category>deep learning</category>
  <category>machine learning</category>
  <guid>https://m-clark.github.io/posts/2021-07-15-dl-for-tabular/</guid>
  <pubDate>Mon, 19 Jul 2021 04:00:00 GMT</pubDate>
  <media:content url="https://m-clark.github.io/img/dl-for-tab/deep_nn.png" medium="image" type="image/png" height="104" width="144"/>
</item>
</channel>
</rss>
