---
title: "Some News for the New Year"
date: '2025-01-01'
citation: false
image: ../../img/mc_logo.png
author:
    - name: Michael Clark
      url: https://m-clark.github.io
      affiliation: OneSix
      affiliation-url: https://onesixsolutions.com
---


## Update

Among many things that have happened recently, I've become a father to a beautiful baby girl, and [written a book](https://m-clark.github.io/book-of-models) to come out this year. Fun stuff!

Elsewhere, my employer [Strong Analytics](https://www.strong.io/) merged with [OneSix](https://www.onesixsolutions.com/), which has gone well so far. It's been great to expand our capabilities and personnel, and I'm excited to see what we can do in the future.

Not so fun - I'm also attempting to migrate my distill site to quarto and using VS Code, which has been, at best, very difficult. I love using Quarto, and highly recommend it for most things (including if you never created a website before), but this particular aspect has not been straightforward. So, while my website will ultimately look slightly better, and hopefully be easier to maintain, the old content will be lacking for a while while I try to get things back in order. Stay tuned.


## Goals

For this website in 2025, there are a couple posts I hope to do:

- A post on class imbalance Elizabeth and I intended for out work blog but which never was published.
- A post I had on conformal prediction that was likewise intended for the work blog.
- Something new that is of interest

I can also foresee more review based stuff, or just having my code be independent of the post. It's only every few years that I update my site significantly, but I definitely get tired of trying to maintain this stuff when many things conspire against doing so. You can use specific environments, but then they will still likely unusable in the future if the package functionality or even the versions are no longer supported. I also don't want a post two years from now to be beholden to a package's current functionality. Caching would solve a lot of it, but doesn't seem to respected when other aspects of the computing environment change.

## Migration Issues

After a lot of effort, it looks like I finally got quarto to use an appropriate python environment (and I've given up on trying to get 'post-specific' environments to work at present). Then came the general publishing problems...

In the end I may lose a lot of the previous code content, since quarto doesn't appear to respect the old web cached objects I had associated with prior posts (which included now defunct or notably modified packages). It also has to use a different directory output, which means I have update links along with rerunning old posts.


Issues I came across in case it's useful to others:

- https://github.com/quarto-dev/quarto-cli/issues/10276
- https://github.com/quarto-dev/quarto-cli/issues/5220
- Deployment error (had to 'rerun all' from github itself)
- Default radian pointing to wrong python environment which would then automatically load that environment and ignore any other env setting.
- https://github.com/quarto-dev/quarto-cli/issues/9929 (I think this was because I was in the gh-pages branch and not the main branch)

What my ultimate solution was:

For Python:

- The only env I could get things to recognize was a conda env in a default location for conda envs. My preference for uv created env, and secondarily, standard py env would not be recognized. 
    - Would not recognize any env in project directories
- In .Rprofile (not `.Renviron`, not `_environment`, which were not resepected) put `Sys.setenv(RETICULATE_PYTHON = "~/anaconda3/envs/m-clark-github-io/bin/python")` followed by `library(reticulate)`.
- I feel like relatively very little is tested with Python for websites, and even less for mixing with R.

For R:

- Quarto does not adhere to the project directory for posts. So the post must be relative to the post file, rather than the project file, which hampers interactivity and/or requires using something like `here::here()` to get the project directory (which assumes RStudio, though should still work, and still won't apply to Python).

For publishing:

- The biggest issue was the inability to use the top-level directory as the output_dir as I had before.
- I also now have to change every post file from its previous name to 'index.qmd' within the date-named directory in order for previous links to work. I could add an [alias](https://quarto.org/docs/websites/website-navigation.html#redirects) to every one of the files and let them redirect, but I prefer the cleaner address, and it's easier to rename the files collectively than to add aliases to every post.
- I had to discover that you can't be in the gh-pages branch (which I'm still fuzzy as to the need of). It's mentioned in the doc, but not stressed or highlighted at all. 

Once I was able to get quarto to render the pages in the first place, it published pretty easily via `quarto publish gh-pages`. I then had an issue where when publishing it gave some 404 error. I noticed it had updated the gh-pages branch after I pushed a recent change to main, so I pushed that branch as well, then tried to publish and it worked. Honestly they need more documentation as to exactly what the workflow is, especially for a blog (and with actual code, rather than a 2 year old demo website with a title suggesting there is but doesn't actually have code).

So it seems the workflow is something like this:

- Make change on main
- Push to main
- Publish
- Cross fingers

