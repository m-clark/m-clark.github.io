---
title: "Title"
description: |
  blah blah
author:
  - name: Michael Clark
    url: https://m-clark.github.io
date: '`r format(Sys.Date(), "%B %d, %Y")`'
preview: ../../img/198R.png   # apparently no way to change the size displayed via css (ignored) or file (stretched)
output:
  distill::distill_article:
    self_contained: false
    toc: true
    css: ../../styles.css
draft: true
tags: [tags, taggy]
categories:
  - ?
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo      = TRUE, 
  message   = FALSE, 
  warning   = FALSE, 
  comment   = NA,
  cache.rebuild = FALSE,
  cache         = TRUE,
  fig.align = 'center',
  fig.asp = .7,
  dev = 'svg',
  dev.args = list(bg = 'transparent'),
  R.options = list(width = 120),
)

library(tidyverse)
library(broom)
library(kableExtra)
library(visibly)

library(tidyverse)

# set the theme as default
theme_set(theme_clean())

# set other point/line default colors; in most cases, we can use the color from
# default discrete scale for more consistency across plots.
update_geom_defaults('vline',  list(colour = 'gray25',  alpha = .25))  # vlines and hlines are typically not attention grabbers so set alpha
update_geom_defaults('hline',  list(colour = 'gray25',  alpha = .25))  # usually a zero marker
update_geom_defaults('point',  list(colour = '#E69F00', alpha = .5))   # alpha as usually there are many points
update_geom_defaults('line',   list(colour = '#E69F00'))
update_geom_defaults('bar',    list(color  = '#E69F00', fill = '#E69F00'))  
update_geom_defaults('col',    list(color  = '#E69F00', fill = '#E69F00'))
update_geom_defaults('smooth', list(color  = '#E69F00', alpha = .15))
update_geom_defaults('dotplot', list(color  = '#E69F00', fill = '#E69F00'))


ggplot <- function(...) ggplot2::ggplot(...) + 
  # brewer bonus is that it is already part of ggplot2
  # scale_color_brewer(palette = 'Dark2', drop = FALSE, aesthetics = c('color', 'fill'))
  # okabe ito colorblind safe scheme
  scale_color_manual(
    values = c(
      '#E69F00',
      '#56B4E9',
      '#009E73',
      '#F0E442',
      '#0072B2',
      '#D55E00',
      '#CC79A7',
      '#999999'
    ),
    drop = FALSE,
    aesthetics = c('color', 'fill')
  )

kable_df <- function(..., digits = 3) {
  kable(..., digits = digits) %>%
    kable_styling(full_width = F)
}

rnd = tidyext::rnd
```



```{r}
set.seed(123)

library(tidyverse)

df1 = tibble(
  id = sample(letters, 10000, replace = TRUE)
)

df2 = tibble(
  id = sample(letters[1:10], 10000, replace = TRUE)
)


library(data.table)
library(dtplyr)

df1_lazy = lazy_dt(df1)
df2_lazy = lazy_dt(df2)

suppressMessages({
  test = bench::mark(
    in_     = df1 %>% filter(!id %in% letters[1:10]),
    in_dtp  = df1_lazy %>% filter(!id %in% letters[1:10]) %>% as_tibble(),     # not usable until collected/as_tibbled
    chin    = df1 %>% filter(!id %chin% letters[1:10]),        # chin for char vector only, from data.table
    chin_dt = data.table(df1)[!df1$id %chin% letters[1:10],],  # won't match with class diff, but checked equality
    aj      = df1 %>% anti_join(df2, by = 'id'),
    aj_noby = df1 %>% anti_join(df2), 
    
    iterations = 100, 
    check      = FALSE
  )
})


test %>% arrange(median)
autoplot(test)

```

